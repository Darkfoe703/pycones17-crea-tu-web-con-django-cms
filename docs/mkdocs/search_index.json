{
    "docs": [
        {
            "location": "/",
            "text": "Crea tu web con django CMS\n\n\nFor full documentation visit \nmkdocs.org\n.\n\n\n\u00cdndice\n\n\n\n\nInstalaci\u00f3n con djangocms-installer\n\n\nP\u00e1ginas:\n\n\nEstructura y contenido\n\n\nBorrador & p\u00fablico\n\n\nInternacionalizaci\u00f3n\n\n\n\n\n\n\nPermisos\n\n\nTemplates & Placeholders\n\n\nMen\u00fas\n\n\nPlugins\n\n\nThird party aplications & Apphooks: Integraci\u00f3n de aplicaciones Django en Django-CMS\n\n\nP\u00e1ginas tipo para facilitar a los editores de contenido la creaci\u00f3n de p\u00e1ginas a partir de tipos predefinidos.\n\n\nExtender el modelo de P\u00e1gina:\n\n\nPage (campos con los mismos valores en todos los idiomas)\n\n\nTitle (campos con valores distintos por idioma)\n\n\n\n\n\n\nExtender el Toolbar\n\n\nExtender el men\u00fa de navegaci\u00f3n\n\n\nCache en Django-CMS\n\n\n\n\nEnlace a la documentaci\u00f3n\n\n\nhttps://jmrivas86.github.io/pycones17-crea-tu-web-con-django-cms\n.\n\n\nEnlace al proyecto finalizado\n\n\nhttps://github.com/jmrivas86/pycones17-crea-tu-web-con-django-cms-code\n.\n\n\nPara ejecutarlo simplemente clone el proyecto o descargue el zip y siga los siguientes pasos:\n\n\ngit clone https://github.com/jmrivas86/pycones17-crea-tu-web-con-django-cms.git\n\n\nvirtualenv env\n\n\nsource env/bin/activate\n\n\npython manage.py runserver\n\n\nInstalando django CMS\n\n\nPrimero crearemos nuestro entorno virtual con virtualenv:\n\n\nmkvirtualenv -p /usr/local/bin/python3 pycones2017\n\n\nvirtualenv env\n\n\nsource env/bin/activate\n\n\nRequisitos\n\n\ndjango CMS necesita Django 1.8, 1.9 or 1.10 y Python 2.7, 3.3, 3.4, 3.5 o 3.6\n\n\nEl entorno de trabajo\n\n\nInstalaremos un entorno virtual con \nvirtualenv\n donde instalaremos todas nuestras dependencias.\n\n\nCreamos y activamos nuestro entorno virtual\n\n\nvirtualenv env\n\n\nsource env/bin/activate\n\n\nSi est\u00e1s usando Windows para activar el virtualenv necesitar\u00e1s:\n\n\nenv\\Scripts\\activate\n\n\nSeguidamente actualizamos pip\n\n\npip install --upgrade pip\n\n\nUsamos django CMS installer para crear nuestro proyecto. Django CMS installer es un script que se encarga de configurar un nuevo proyecto de django CMS\n\n\npip install djangocms-installer\n\n\nEsto nos proporcionar\u00e1 un nuevo comando con el que arrancaremos nuestro proyecto, \ndjangocms\n\n\ndjangocms -f mi_web\n\n\nAhora ya podemos arrancar nuestro servidor de desarrollo:\n\n\npython manage.py runserver\n\n\nPara entrar en el CMS accedemos a \nlocalhost:8000?edit\n y entramos con las credenciales que el script nos ha creado automaticamente:\n\n\n\n\nusuario: admin\n\n\ncontrase\u00f1a: admin\n\n\n\n\nPor \u00faltimo vamos a a\u00f1adir algunas configuraciones al \nsettings.py\n del proyecto que nos har\u00e1 en los siguientes pasos:\n\n\nTHUMBNAIL_PROCESSORS = (\n    'easy_thumbnails.processors.colorspace',\n    'easy_thumbnails.processors.autocrop',\n    'filer.thumbnail_processors.scale_and_crop_with_subject_location',\n    'easy_thumbnails.processors.filters'\n)\n\nDJANGOCMS_STYLE_CHOICES = ['container', 'content', 'teaser', 'row']\nDJANGOCMS_STYLE_TAGS = ['div', 'article', 'section', 'header', 'footer',\n                        'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'i']",
            "title": "Inicio"
        },
        {
            "location": "/#crea-tu-web-con-django-cms",
            "text": "For full documentation visit  mkdocs.org .",
            "title": "Crea tu web con django CMS"
        },
        {
            "location": "/#indice",
            "text": "Instalaci\u00f3n con djangocms-installer  P\u00e1ginas:  Estructura y contenido  Borrador & p\u00fablico  Internacionalizaci\u00f3n    Permisos  Templates & Placeholders  Men\u00fas  Plugins  Third party aplications & Apphooks: Integraci\u00f3n de aplicaciones Django en Django-CMS  P\u00e1ginas tipo para facilitar a los editores de contenido la creaci\u00f3n de p\u00e1ginas a partir de tipos predefinidos.  Extender el modelo de P\u00e1gina:  Page (campos con los mismos valores en todos los idiomas)  Title (campos con valores distintos por idioma)    Extender el Toolbar  Extender el men\u00fa de navegaci\u00f3n  Cache en Django-CMS",
            "title": "\u00cdndice"
        },
        {
            "location": "/#enlace-a-la-documentacion",
            "text": "https://jmrivas86.github.io/pycones17-crea-tu-web-con-django-cms .",
            "title": "Enlace a la documentaci\u00f3n"
        },
        {
            "location": "/#enlace-al-proyecto-finalizado",
            "text": "https://github.com/jmrivas86/pycones17-crea-tu-web-con-django-cms-code .  Para ejecutarlo simplemente clone el proyecto o descargue el zip y siga los siguientes pasos:  git clone https://github.com/jmrivas86/pycones17-crea-tu-web-con-django-cms.git  virtualenv env  source env/bin/activate  python manage.py runserver",
            "title": "Enlace al proyecto finalizado"
        },
        {
            "location": "/#instalando-django-cms",
            "text": "Primero crearemos nuestro entorno virtual con virtualenv:  mkvirtualenv -p /usr/local/bin/python3 pycones2017  virtualenv env  source env/bin/activate",
            "title": "Instalando django CMS"
        },
        {
            "location": "/#requisitos",
            "text": "django CMS necesita Django 1.8, 1.9 or 1.10 y Python 2.7, 3.3, 3.4, 3.5 o 3.6",
            "title": "Requisitos"
        },
        {
            "location": "/#el-entorno-de-trabajo",
            "text": "Instalaremos un entorno virtual con  virtualenv  donde instalaremos todas nuestras dependencias.",
            "title": "El entorno de trabajo"
        },
        {
            "location": "/#creamos-y-activamos-nuestro-entorno-virtual",
            "text": "virtualenv env  source env/bin/activate  Si est\u00e1s usando Windows para activar el virtualenv necesitar\u00e1s:  env\\Scripts\\activate  Seguidamente actualizamos pip  pip install --upgrade pip  Usamos django CMS installer para crear nuestro proyecto. Django CMS installer es un script que se encarga de configurar un nuevo proyecto de django CMS  pip install djangocms-installer  Esto nos proporcionar\u00e1 un nuevo comando con el que arrancaremos nuestro proyecto,  djangocms  djangocms -f mi_web  Ahora ya podemos arrancar nuestro servidor de desarrollo:  python manage.py runserver  Para entrar en el CMS accedemos a  localhost:8000?edit  y entramos con las credenciales que el script nos ha creado automaticamente:   usuario: admin  contrase\u00f1a: admin   Por \u00faltimo vamos a a\u00f1adir algunas configuraciones al  settings.py  del proyecto que nos har\u00e1 en los siguientes pasos:  THUMBNAIL_PROCESSORS = (\n    'easy_thumbnails.processors.colorspace',\n    'easy_thumbnails.processors.autocrop',\n    'filer.thumbnail_processors.scale_and_crop_with_subject_location',\n    'easy_thumbnails.processors.filters'\n)\n\nDJANGOCMS_STYLE_CHOICES = ['container', 'content', 'teaser', 'row']\nDJANGOCMS_STYLE_TAGS = ['div', 'article', 'section', 'header', 'footer',\n                        'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'i']",
            "title": "Creamos y activamos nuestro entorno virtual"
        },
        {
            "location": "/paginas/",
            "text": "P\u00e1ginas\n\n\n\n\n\n\nUna P\u00e1gina es la entidad m\u00e1s b\u00e1sica de la estructura del sitio en django CMS.\n\n\n\n\n\n\nEl CMS utiliza un modelo \njer\u00e1rquico\n de la p\u00e1gina: cada p\u00e1gina est\u00e1 en relaci\u00f3n con otras p\u00e1ginas (padre, hijo o hermano). Esta jerarqu\u00eda es administrada por la librer\u00eda \ndjango-treebeardmde\n.\n\n\n\n\n\n\nLas p\u00e1ginas son \ntraducibles\n por lo tanto una P\u00e1gina tambi\u00e9n tiene propiedades espec\u00edficas de idioma (tendr\u00e1 un t\u00edtulo y un slug para cada idioma en el que existe). Estas propiedades son gestionadas por el modelo \ncms.models.Title\n\n\n\n\n\n\nEst\u00e1n basadas en \nplantillas\n.\n\n\n\n\n\n\nTienen versiones \nBorrador y publicada\n\n\n\n\n\n\n\n\n\n\nEstructura y contenido\n\n\nA la hora de editar una p\u00e1gina, en la parte derecha del toolbar de gesti\u00f3n nos encontraremos con dos botones: estructura y contenido.\n\n\n\n\nEstructura\n\n\nEn la parte de estructura veremos los distintos placeholders que componen la p\u00e1gina y podremos ir incluyendo plugins  dentro de ellos.\n\n\nAdem\u00e1s de a\u00f1adir plugins, podemos moverlos, copiarlos as\u00ed como a\u00f1adir plugins anidados.\n\n\n\n\nContenido\n\n\nDentro de la pesta\u00f1a de contenido en la parte de edici\u00f3n podremos ver c\u00f3mo queda la p\u00e1gina y haciendo doble click sobre los distintos plugins podemos modificar el contenido (texto, imagen, etc).\n\n\n\n\nBorrador & p\u00fablico\n\n\nC\u00e1da p\u00e1gina que creemos en el CMS tendr\u00e1 dos versiones una p\u00fablica y otra borrador.\n\n\nInternacionalizaci\u00f3n\n\n\nUna p\u00e1gina podr\u00e1 tener distintas traducciones.\n\n\nCuando vayamos a crear la traducci\u00f3n de una p\u00e1gina ya creada podremos copiar todos los plugins que tenga la p\u00e1gina en el idioma que ya est\u00e1 editado.",
            "title": "P\u00e1ginas"
        },
        {
            "location": "/paginas/#paginas",
            "text": "Una P\u00e1gina es la entidad m\u00e1s b\u00e1sica de la estructura del sitio en django CMS.    El CMS utiliza un modelo  jer\u00e1rquico  de la p\u00e1gina: cada p\u00e1gina est\u00e1 en relaci\u00f3n con otras p\u00e1ginas (padre, hijo o hermano). Esta jerarqu\u00eda es administrada por la librer\u00eda  django-treebeardmde .    Las p\u00e1ginas son  traducibles  por lo tanto una P\u00e1gina tambi\u00e9n tiene propiedades espec\u00edficas de idioma (tendr\u00e1 un t\u00edtulo y un slug para cada idioma en el que existe). Estas propiedades son gestionadas por el modelo  cms.models.Title    Est\u00e1n basadas en  plantillas .    Tienen versiones  Borrador y publicada",
            "title": "P\u00e1ginas"
        },
        {
            "location": "/paginas/#estructura-y-contenido",
            "text": "A la hora de editar una p\u00e1gina, en la parte derecha del toolbar de gesti\u00f3n nos encontraremos con dos botones: estructura y contenido.",
            "title": "Estructura y contenido"
        },
        {
            "location": "/paginas/#estructura",
            "text": "En la parte de estructura veremos los distintos placeholders que componen la p\u00e1gina y podremos ir incluyendo plugins  dentro de ellos.  Adem\u00e1s de a\u00f1adir plugins, podemos moverlos, copiarlos as\u00ed como a\u00f1adir plugins anidados.",
            "title": "Estructura"
        },
        {
            "location": "/paginas/#contenido",
            "text": "Dentro de la pesta\u00f1a de contenido en la parte de edici\u00f3n podremos ver c\u00f3mo queda la p\u00e1gina y haciendo doble click sobre los distintos plugins podemos modificar el contenido (texto, imagen, etc).",
            "title": "Contenido"
        },
        {
            "location": "/paginas/#borrador-publico",
            "text": "C\u00e1da p\u00e1gina que creemos en el CMS tendr\u00e1 dos versiones una p\u00fablica y otra borrador.",
            "title": "Borrador &amp; p\u00fablico"
        },
        {
            "location": "/paginas/#internacionalizacion",
            "text": "Una p\u00e1gina podr\u00e1 tener distintas traducciones.  Cuando vayamos a crear la traducci\u00f3n de una p\u00e1gina ya creada podremos copiar todos los plugins que tenga la p\u00e1gina en el idioma que ya est\u00e1 editado.",
            "title": "Internacionalizaci\u00f3n"
        },
        {
            "location": "/permisos/",
            "text": "Permisos\n\n\nEn django CMS tenemos la posibilidad de habilitar un sistema de permisos propio. Se pueden conceder permisos:\n\n\n\n\nQue determinan qu\u00e9 acciones puede realizar un usuario.\n\n\nQue determinan en qu\u00e9 partes del sitio pueden realizarlas.\n\n\n\n\nEstas dos dimensiones de los permisos son independientes entre s\u00ed.\n\n\nPara activar este sistema debemos seleccionar en el fichero settings.py del proyecto la variable CMS_PERMISSION a True, sin embargo si decidimos no habilitarlo lo pondremos a False y el sistema de permisos que prevalecer\u00e1 ser\u00e1 el est\u00e1ndar django. Por defecto CMS_PERMISSION ser\u00e1 habilitado:\n\n\nCMS_PERMISSION = TRUE\n\n\nCuando CMS_PERMISSION est\u00e1 habilitado, encontrar\u00e1 tres nuevos modelos disponibles en el administrador:\n\n\n\n\nPermisos globales de las p\u00e1ginas\n\n\nGrupos de usuarios (p\u00e1gina)\n\n\nUsuarios (p\u00e1gina)\n\n\n\n\n\n\nDescubrir\u00e1 que estos dos \u00faltimos simplemente reflejan los Grupos Django y los permisos de Usuario que ya existen en el sistema. Son una representaci\u00f3n m\u00e1s simple de los permisos disponibles, espec\u00edficos para la edici\u00f3n de p\u00e1ginas. A menudo encontrar\u00e1 m\u00e1s \u00fatil utilizar los grupos Django y los permisos de usuario.\n\n\nPermisos de p\u00e1gina\n\n\nCuando CMS_PERMISSION est\u00e1 habilitado, a menos que simplemente hagamos que los usuarios sean superusuarios, necesitaremos dar a cada uno de ellos un permiso global o permiso sobre p\u00e1ginas espec\u00edficas (preferiblemente a trav\u00e9s de su pertenencia a un grupo).\n\n\nTanto la concesi\u00f3n de permisos globales como espec\u00edficos se describen a continuaci\u00f3n.\n\n\nPermisos de p\u00e1ginas globales\n\n\nLos permisos globales de las p\u00e1ginas est\u00e1n disponibles en la secci\u00f3n django CMS del administrador.\n\n\n\n\nLas dos primeras opciones para un permiso global se refieren a qui\u00e9nes solicitan.\n\n\nA continuaci\u00f3n, se muestra una lista de las acciones que puede realizar el editor. Los editores necesitar\u00e1n al menos algunos de estos si van a administrar p\u00e1ginas.\n\n\nFinalmente, hay una lista de los sitios en los que pueden realizar las acciones.\n\n\nPermisos espec\u00edficos de p\u00e1gina\n\n\nEl sistema de permisos CMS tambi\u00e9n proporciona el control de permisos para p\u00e1ginas o jerarqu\u00edas de p\u00e1ginas.\n\n\n\u00c9stas se controlan seleccionando \nPermisos\n desde el men\u00fa de P\u00e1gina en la barra de herramientas cuando se encuentra en la p\u00e1gina (esta opci\u00f3n s\u00f3lo est\u00e1 disponible cuando el modo CMS_PERMISSION est\u00e1 activado).\n\n\n\n\nEl inicio de sesi\u00f3n requerido determina si los visitantes an\u00f3nimos podr\u00e1n ver la p\u00e1gina en absoluto.\n\n\nLa visibilidad de los men\u00fas determina qui\u00e9n podr\u00e1 ver la p\u00e1gina en los men\u00fas de navegaci\u00f3n: todos, s\u00f3lo usuarios an\u00f3nimos o que hayan iniciado sesi\u00f3n.\n\n\nLas restricciones de visualizaci\u00f3n determinan qu\u00e9 grupos y usuarios podr\u00e1n ver la p\u00e1gina.\n\n\nTenga en cuenta que esto no aplica nuevas restricciones a los usuarios que tambi\u00e9n son editores con permisos apropiados.\n\n\nLos permisos de p\u00e1gina determinan lo que los editores pueden hacer a una p\u00e1gina (o jerarqu\u00eda de p\u00e1ginas). Funcionan igual que los permisos globales de las P\u00e1ginas descritos anteriormente, pero no se aplican globalmente. Se a\u00f1aden a los permisos globales - no los anulan.",
            "title": "Permisos"
        },
        {
            "location": "/permisos/#permisos",
            "text": "En django CMS tenemos la posibilidad de habilitar un sistema de permisos propio. Se pueden conceder permisos:   Que determinan qu\u00e9 acciones puede realizar un usuario.  Que determinan en qu\u00e9 partes del sitio pueden realizarlas.   Estas dos dimensiones de los permisos son independientes entre s\u00ed.  Para activar este sistema debemos seleccionar en el fichero settings.py del proyecto la variable CMS_PERMISSION a True, sin embargo si decidimos no habilitarlo lo pondremos a False y el sistema de permisos que prevalecer\u00e1 ser\u00e1 el est\u00e1ndar django. Por defecto CMS_PERMISSION ser\u00e1 habilitado:  CMS_PERMISSION = TRUE  Cuando CMS_PERMISSION est\u00e1 habilitado, encontrar\u00e1 tres nuevos modelos disponibles en el administrador:   Permisos globales de las p\u00e1ginas  Grupos de usuarios (p\u00e1gina)  Usuarios (p\u00e1gina)    Descubrir\u00e1 que estos dos \u00faltimos simplemente reflejan los Grupos Django y los permisos de Usuario que ya existen en el sistema. Son una representaci\u00f3n m\u00e1s simple de los permisos disponibles, espec\u00edficos para la edici\u00f3n de p\u00e1ginas. A menudo encontrar\u00e1 m\u00e1s \u00fatil utilizar los grupos Django y los permisos de usuario.",
            "title": "Permisos"
        },
        {
            "location": "/permisos/#permisos-de-pagina",
            "text": "Cuando CMS_PERMISSION est\u00e1 habilitado, a menos que simplemente hagamos que los usuarios sean superusuarios, necesitaremos dar a cada uno de ellos un permiso global o permiso sobre p\u00e1ginas espec\u00edficas (preferiblemente a trav\u00e9s de su pertenencia a un grupo).  Tanto la concesi\u00f3n de permisos globales como espec\u00edficos se describen a continuaci\u00f3n.",
            "title": "Permisos de p\u00e1gina"
        },
        {
            "location": "/permisos/#permisos-de-paginas-globales",
            "text": "Los permisos globales de las p\u00e1ginas est\u00e1n disponibles en la secci\u00f3n django CMS del administrador.   Las dos primeras opciones para un permiso global se refieren a qui\u00e9nes solicitan.  A continuaci\u00f3n, se muestra una lista de las acciones que puede realizar el editor. Los editores necesitar\u00e1n al menos algunos de estos si van a administrar p\u00e1ginas.  Finalmente, hay una lista de los sitios en los que pueden realizar las acciones.",
            "title": "Permisos de p\u00e1ginas globales"
        },
        {
            "location": "/permisos/#permisos-especificos-de-pagina",
            "text": "El sistema de permisos CMS tambi\u00e9n proporciona el control de permisos para p\u00e1ginas o jerarqu\u00edas de p\u00e1ginas.  \u00c9stas se controlan seleccionando  Permisos  desde el men\u00fa de P\u00e1gina en la barra de herramientas cuando se encuentra en la p\u00e1gina (esta opci\u00f3n s\u00f3lo est\u00e1 disponible cuando el modo CMS_PERMISSION est\u00e1 activado).   El inicio de sesi\u00f3n requerido determina si los visitantes an\u00f3nimos podr\u00e1n ver la p\u00e1gina en absoluto.  La visibilidad de los men\u00fas determina qui\u00e9n podr\u00e1 ver la p\u00e1gina en los men\u00fas de navegaci\u00f3n: todos, s\u00f3lo usuarios an\u00f3nimos o que hayan iniciado sesi\u00f3n.  Las restricciones de visualizaci\u00f3n determinan qu\u00e9 grupos y usuarios podr\u00e1n ver la p\u00e1gina.  Tenga en cuenta que esto no aplica nuevas restricciones a los usuarios que tambi\u00e9n son editores con permisos apropiados.  Los permisos de p\u00e1gina determinan lo que los editores pueden hacer a una p\u00e1gina (o jerarqu\u00eda de p\u00e1ginas). Funcionan igual que los permisos globales de las P\u00e1ginas descritos anteriormente, pero no se aplican globalmente. Se a\u00f1aden a los permisos globales - no los anulan.",
            "title": "Permisos espec\u00edficos de p\u00e1gina"
        },
        {
            "location": "/templates/",
            "text": "Templates & Placeholders\n\n\nVeamos ahora los Placeholders y las plantillas.\n\n\nPlantillas\n\n\nCon las plantillas podemos personalizar el aspecto de nuestro sitio web, definir placeholders para marcar secciones de contenido gestionado y utilizar etiquetas especiales para generar men\u00fas y mucho m\u00e1s.\n\n\nPodemos definir varias plantillas, con diferentes estilos, layouts, componentes y elegirlas para cada p\u00e1gina seg\u00fan sea necesario. Una plantilla de p\u00e1gina se puede cambiar por otra en cualquier momento.\n\n\nLa plantilla de la p\u00e1gina de inicio creada autom\u00e1ticamente es fullwidth.html, la primera que aparece en la configuraci\u00f3n del settings.py \nCMS_TEMPLATES\n:\n\n\nCMS_TEMPLATES = (\n    ## Customize this\n    ('fullwidth.html', 'Fullwidth'),\n    ('sidebar_left.html', 'Sidebar Left'),\n    ('sidebar_right.html', 'Sidebar Right')\n)\n\n\n\n\nPodemos ver que tenemos una plantilla html que se llama \nbase.html\n la cual contiene la estructura b\u00e1sica que heredar\u00e1 todas las plantillas y adem\u00e1s crearemos una nueva que llamaremos \nhome.html\n que ser\u00e1 la que configuraremos para la home de nuestra web.\n\n\nbase.html\n\n\nLos cambios que a\u00f1adimos a nuestra home para adaptarla son:\n\n\n\n\nA\u00f1adimos el templatetag static\n\n\n\n\n{% load static cms_tags menu_tags sekizai_tags %}\n\n\n\n\nCreamos un block justo antes del \n{% render_block \"css\" %}\n para incluir dentro los ficheros con los estilos del tema SOLID con los que crearemos nuestra web.\n\n\n\n\n{% block css %}\n  <!-- Bootstrap core CSS -->\n  <link href=\"{% static 'vendor/css/bootstrap.css' %}\" rel=\"stylesheet\">\n  <!-- Custom styles for this template -->\n  <link href=\"{% static 'vendor/css/style.css' %}\" rel=\"stylesheet\">\n  <link href=\"{% static 'vendor/css/font-awesome.min.css' %}\" rel=\"stylesheet\">\n{% endblock %}\n{% render_block \"css\" %}\n<script src=\"{% static 'vendor/js/modernizr.js' %}\"></script>\n\n\n\n\n\n\nQuitamos el div con la clase \ncontainer\n y dejamos s\u00f3lamente el men\u00fa y el block content.\n\n\n\n\n<ul class=\"nav\">\n    {% show_menu 0 100 100 100 %}\n</ul>\n{% block content %}{% endblock content %}\n\n\n\n\n\n\nAl igual que con las css creamos otro block justo antes del \n{% render_block \"js\" %}\n para incluir dentro los ficheros con los ficheros javascript.\n\n\n\n\n{% block js %}\n  <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js\"></script>\n  <script src=\"{% static 'vendor/js/bootstrap.min.js' %}\"></script>\n  <script src=\"{% static 'vendor/js/retina-1.1.0.js' %}\"></script>\n  <script src=\"{% static 'vendor/js/jquery.hoverdir.js' %}\"></script>\n  <script src=\"{% static 'vendor/js/jquery.hoverex.min.js' %}\"></script>\n  <script src=\"{% static 'vendor/js/jquery.prettyPhoto.js' %}\"></script>\n  <script src=\"{% static 'vendor/js/jquery.isotope.min.js' %}\"></script>\n  <script src=\"{% static 'vendor/js/custom.js' %}\"></script>\n{% endblock %}\n{% render_block \"js\" %}\n\n\n\n\nA continuaci\u00f3n creamos nuestra plantilla \nhome.html\n\n\n{% extends \"base.html\" %}\n{% load cms_tags %}\n\n{% block title %}{% page_attribute \"page_title\" %}{% endblock title %}\n\n{% block content %}\n    {% placeholder \"content\" %}\n{% endblock content %}\n\n\n\n\nPlaceholders\n\n\nLos placeholders o marcadores de posici\u00f3n son una forma f\u00e1cil de definir secciones en una plantilla HTML que se rellenar\u00e1 con contenido de la base de datos cuando la p\u00e1gina sea renderizada.\n\n\nEste contenido se edita usando django CMS, usando los template tags de Django.\n\n\nNuestra home.html contiene un \u00fanico placeholder por el momento\n\n\n{% placeholder \"content\" %}\n\n\nPrimero hemos cargado el template tag cms_tags para poder usar los tags \nplaceholder\n y \npage_attribute\n\n\n{% load cms_tags %}\n\n\nStatic Placeholders\n\n\nEl contenido de los placeholders que hemos visto hasta ahora es diferente para cada p\u00e1gina. A veces, queremos tener una secci\u00f3n en nuestra web que debe ser la misma en todas las p\u00e1gina, como el bloque de pie de p\u00e1gina.\n\n\nPodr\u00edamos programar el pie de p\u00e1gina en el html directamente, pero ser\u00eda mejor ser capaz de controlarlo a trav\u00e9s del CMS. Para esto son los \nplaceholders est\u00e1ticos\n.\n\n\nLos placeholders est\u00e1ticos son una forma f\u00e1cil de mostrar el mismo contenido en m\u00faltiples sitios en nuestra web. Act\u00faan casi como los placeholders normales, excepto por el hecho de que una vez que se crea y se agrega contenido a \u00e9l, se guardar\u00e1 globalmente. Incluso cuando elimine los placeholders est\u00e1ticos de una plantilla, puede reutilizarlos m\u00e1s tarde.\n\n\nCrearemos el footer de nuestra web con un static placeholder:\n\n\n<footer>\n  {% static_placeholder 'footer' %}\n</footer>\n\n\n\n\nDespu\u00e9s de editar el footer nuestra vista estructura de la home tiene que verse de un manera similar a la siguiente:\n\n\n\n\nPodemos ver que el placeholder de Footer tiene una chincheta que nos indica que es est\u00e1tico, dicho placeholder estar\u00e1 en todas las templates.\n\n\nResultado final de plantillas base y home\n\n\nNuestra plantilla \nbase.html\n tiene que quedar de la siguiente manera:\n\n\n{% load static cms_tags menu_tags sekizai_tags %}\n<!doctype html>\n<html>\n    <head>\n      <meta charset=\"utf-8\">\n      <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n      <meta name=\"description\" content=\"\">\n      <meta name=\"author\" content=\"\">\n      <link rel=\"shortcut icon\" href=\"{% static \"vendor/ico/favicon.ico\" %}\">\n\n      <title>{% block title %}This is my new project home page{% endblock title %}</title>\n\n      <style type=\"text/css\">\n          .nav {\n              padding-left: 0;\n          }\n          .nav li {\n              display: inline;\n              list-style-type: none;\n              padding-right: 20px;\n          }\n          .container {\n              width: 940px;\n              margin: 0 auto\n          }\n          .content {\n              float: left;\n              width: 80%;\n          }\n          .sidebar {\n              float: left;\n              width: 20%;\n          }\n      </style>\n\n      {% block css %}\n        <!-- Bootstrap core CSS -->\n        <link href=\"{% static 'vendor/css/bootstrap.css' %}\" rel=\"stylesheet\">\n\n        <!-- Custom styles for this template -->\n        <link href=\"{% static 'vendor/css/style.css' %}\" rel=\"stylesheet\">\n        <link href=\"{% static 'vendor/css/font-awesome.min.css' %}\" rel=\"stylesheet\">\n      {% endblock %}\n\n      {% render_block \"css\" %}\n      <script src=\"{% static 'vendor/js/modernizr.js' %}\"></script>\n\n    </head>\n    <body>\n        {% cms_toolbar %}\n        <ul class=\"nav\">\n            {% show_menu 0 100 100 100 %}\n        </ul>\n\n        {% block content %}{% endblock content %}\n\n        <footer>\n          {% static_placeholder 'footer' %}\n        </footer>\n        {% block js %}\n          <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js\"></script>\n          <script src=\"{% static 'vendor/js/bootstrap.min.js' %}\"></script>\n          <script src=\"{% static 'vendor/js/retina-1.1.0.js' %}\"></script>\n          <script src=\"{% static 'vendor/js/jquery.hoverdir.js' %}\"></script>\n          <script src=\"{% static 'vendor/js/jquery.hoverex.min.js' %}\"></script>\n          <script src=\"{% static 'vendor/js/jquery.prettyPhoto.js' %}\"></script>\n          <script src=\"{% static 'vendor/js/jquery.isotope.min.js' %}\"></script>\n          <script src=\"{% static 'vendor/js/custom.js' %}\"></script>\n        {% endblock %}\n        {% render_block \"js\" %}\n    </body>\n</html>\n\n\n\n\n\nCrearemos tambi\u00e9n una plantilla \nhome.html\n que ser\u00e1 con la que montemos la p\u00e1gina home de nuestra web, el resultado ser\u00eda como sigue:\n\n\n{% extends \"base.html\" %}\n{% load cms_tags %}\n\n{% block title %}{% page_attribute \"page_title\" %}{% endblock title %}\n\n{% block content %}\n    {% placeholder \"content\" %}\n{% endblock content %}\n\n\n\n\n\nTambi\u00e9n tendremos que a\u00f1adirla al \nCMS_TEMPLATES\n del \nsettings.py\n:\n\n\nCMS_TEMPLATES = (\n    ('fullwidth.html', 'Fullwidth'),\n    ('sidebar_left.html', 'Sidebar Left'),\n    ('sidebar_right.html', 'Sidebar Right')\n    ('home.html', 'Home'),\n)\n\n\n\n\nDEMO\n\n\nAhora es tiempo de editar la p\u00e1gina y crear nuestra home replicando la del tema SOLID.",
            "title": "Templates"
        },
        {
            "location": "/templates/#templates-placeholders",
            "text": "Veamos ahora los Placeholders y las plantillas.",
            "title": "Templates &amp; Placeholders"
        },
        {
            "location": "/templates/#plantillas",
            "text": "Con las plantillas podemos personalizar el aspecto de nuestro sitio web, definir placeholders para marcar secciones de contenido gestionado y utilizar etiquetas especiales para generar men\u00fas y mucho m\u00e1s.  Podemos definir varias plantillas, con diferentes estilos, layouts, componentes y elegirlas para cada p\u00e1gina seg\u00fan sea necesario. Una plantilla de p\u00e1gina se puede cambiar por otra en cualquier momento.  La plantilla de la p\u00e1gina de inicio creada autom\u00e1ticamente es fullwidth.html, la primera que aparece en la configuraci\u00f3n del settings.py  CMS_TEMPLATES :  CMS_TEMPLATES = (\n    ## Customize this\n    ('fullwidth.html', 'Fullwidth'),\n    ('sidebar_left.html', 'Sidebar Left'),\n    ('sidebar_right.html', 'Sidebar Right')\n)  Podemos ver que tenemos una plantilla html que se llama  base.html  la cual contiene la estructura b\u00e1sica que heredar\u00e1 todas las plantillas y adem\u00e1s crearemos una nueva que llamaremos  home.html  que ser\u00e1 la que configuraremos para la home de nuestra web.",
            "title": "Plantillas"
        },
        {
            "location": "/templates/#basehtml",
            "text": "Los cambios que a\u00f1adimos a nuestra home para adaptarla son:   A\u00f1adimos el templatetag static   {% load static cms_tags menu_tags sekizai_tags %}   Creamos un block justo antes del  {% render_block \"css\" %}  para incluir dentro los ficheros con los estilos del tema SOLID con los que crearemos nuestra web.   {% block css %}\n  <!-- Bootstrap core CSS -->\n  <link href=\"{% static 'vendor/css/bootstrap.css' %}\" rel=\"stylesheet\">\n  <!-- Custom styles for this template -->\n  <link href=\"{% static 'vendor/css/style.css' %}\" rel=\"stylesheet\">\n  <link href=\"{% static 'vendor/css/font-awesome.min.css' %}\" rel=\"stylesheet\">\n{% endblock %}\n{% render_block \"css\" %}\n<script src=\"{% static 'vendor/js/modernizr.js' %}\"></script>   Quitamos el div con la clase  container  y dejamos s\u00f3lamente el men\u00fa y el block content.   <ul class=\"nav\">\n    {% show_menu 0 100 100 100 %}\n</ul>\n{% block content %}{% endblock content %}   Al igual que con las css creamos otro block justo antes del  {% render_block \"js\" %}  para incluir dentro los ficheros con los ficheros javascript.   {% block js %}\n  <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js\"></script>\n  <script src=\"{% static 'vendor/js/bootstrap.min.js' %}\"></script>\n  <script src=\"{% static 'vendor/js/retina-1.1.0.js' %}\"></script>\n  <script src=\"{% static 'vendor/js/jquery.hoverdir.js' %}\"></script>\n  <script src=\"{% static 'vendor/js/jquery.hoverex.min.js' %}\"></script>\n  <script src=\"{% static 'vendor/js/jquery.prettyPhoto.js' %}\"></script>\n  <script src=\"{% static 'vendor/js/jquery.isotope.min.js' %}\"></script>\n  <script src=\"{% static 'vendor/js/custom.js' %}\"></script>\n{% endblock %}\n{% render_block \"js\" %}  A continuaci\u00f3n creamos nuestra plantilla  home.html  {% extends \"base.html\" %}\n{% load cms_tags %}\n\n{% block title %}{% page_attribute \"page_title\" %}{% endblock title %}\n\n{% block content %}\n    {% placeholder \"content\" %}\n{% endblock content %}",
            "title": "base.html"
        },
        {
            "location": "/templates/#placeholders",
            "text": "Los placeholders o marcadores de posici\u00f3n son una forma f\u00e1cil de definir secciones en una plantilla HTML que se rellenar\u00e1 con contenido de la base de datos cuando la p\u00e1gina sea renderizada.  Este contenido se edita usando django CMS, usando los template tags de Django.  Nuestra home.html contiene un \u00fanico placeholder por el momento  {% placeholder \"content\" %}  Primero hemos cargado el template tag cms_tags para poder usar los tags  placeholder  y  page_attribute  {% load cms_tags %}",
            "title": "Placeholders"
        },
        {
            "location": "/templates/#static-placeholders",
            "text": "El contenido de los placeholders que hemos visto hasta ahora es diferente para cada p\u00e1gina. A veces, queremos tener una secci\u00f3n en nuestra web que debe ser la misma en todas las p\u00e1gina, como el bloque de pie de p\u00e1gina.  Podr\u00edamos programar el pie de p\u00e1gina en el html directamente, pero ser\u00eda mejor ser capaz de controlarlo a trav\u00e9s del CMS. Para esto son los  placeholders est\u00e1ticos .  Los placeholders est\u00e1ticos son una forma f\u00e1cil de mostrar el mismo contenido en m\u00faltiples sitios en nuestra web. Act\u00faan casi como los placeholders normales, excepto por el hecho de que una vez que se crea y se agrega contenido a \u00e9l, se guardar\u00e1 globalmente. Incluso cuando elimine los placeholders est\u00e1ticos de una plantilla, puede reutilizarlos m\u00e1s tarde.  Crearemos el footer de nuestra web con un static placeholder:  <footer>\n  {% static_placeholder 'footer' %}\n</footer>  Despu\u00e9s de editar el footer nuestra vista estructura de la home tiene que verse de un manera similar a la siguiente:   Podemos ver que el placeholder de Footer tiene una chincheta que nos indica que es est\u00e1tico, dicho placeholder estar\u00e1 en todas las templates.",
            "title": "Static Placeholders"
        },
        {
            "location": "/templates/#resultado-final-de-plantillas-base-y-home",
            "text": "Nuestra plantilla  base.html  tiene que quedar de la siguiente manera:  {% load static cms_tags menu_tags sekizai_tags %}\n<!doctype html>\n<html>\n    <head>\n      <meta charset=\"utf-8\">\n      <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n      <meta name=\"description\" content=\"\">\n      <meta name=\"author\" content=\"\">\n      <link rel=\"shortcut icon\" href=\"{% static \"vendor/ico/favicon.ico\" %}\">\n\n      <title>{% block title %}This is my new project home page{% endblock title %}</title>\n\n      <style type=\"text/css\">\n          .nav {\n              padding-left: 0;\n          }\n          .nav li {\n              display: inline;\n              list-style-type: none;\n              padding-right: 20px;\n          }\n          .container {\n              width: 940px;\n              margin: 0 auto\n          }\n          .content {\n              float: left;\n              width: 80%;\n          }\n          .sidebar {\n              float: left;\n              width: 20%;\n          }\n      </style>\n\n      {% block css %}\n        <!-- Bootstrap core CSS -->\n        <link href=\"{% static 'vendor/css/bootstrap.css' %}\" rel=\"stylesheet\">\n\n        <!-- Custom styles for this template -->\n        <link href=\"{% static 'vendor/css/style.css' %}\" rel=\"stylesheet\">\n        <link href=\"{% static 'vendor/css/font-awesome.min.css' %}\" rel=\"stylesheet\">\n      {% endblock %}\n\n      {% render_block \"css\" %}\n      <script src=\"{% static 'vendor/js/modernizr.js' %}\"></script>\n\n    </head>\n    <body>\n        {% cms_toolbar %}\n        <ul class=\"nav\">\n            {% show_menu 0 100 100 100 %}\n        </ul>\n\n        {% block content %}{% endblock content %}\n\n        <footer>\n          {% static_placeholder 'footer' %}\n        </footer>\n        {% block js %}\n          <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js\"></script>\n          <script src=\"{% static 'vendor/js/bootstrap.min.js' %}\"></script>\n          <script src=\"{% static 'vendor/js/retina-1.1.0.js' %}\"></script>\n          <script src=\"{% static 'vendor/js/jquery.hoverdir.js' %}\"></script>\n          <script src=\"{% static 'vendor/js/jquery.hoverex.min.js' %}\"></script>\n          <script src=\"{% static 'vendor/js/jquery.prettyPhoto.js' %}\"></script>\n          <script src=\"{% static 'vendor/js/jquery.isotope.min.js' %}\"></script>\n          <script src=\"{% static 'vendor/js/custom.js' %}\"></script>\n        {% endblock %}\n        {% render_block \"js\" %}\n    </body>\n</html>  Crearemos tambi\u00e9n una plantilla  home.html  que ser\u00e1 con la que montemos la p\u00e1gina home de nuestra web, el resultado ser\u00eda como sigue:  {% extends \"base.html\" %}\n{% load cms_tags %}\n\n{% block title %}{% page_attribute \"page_title\" %}{% endblock title %}\n\n{% block content %}\n    {% placeholder \"content\" %}\n{% endblock content %}  Tambi\u00e9n tendremos que a\u00f1adirla al  CMS_TEMPLATES  del  settings.py :  CMS_TEMPLATES = (\n    ('fullwidth.html', 'Fullwidth'),\n    ('sidebar_left.html', 'Sidebar Left'),\n    ('sidebar_right.html', 'Sidebar Right')\n    ('home.html', 'Home'),\n)",
            "title": "Resultado final de plantillas base y home"
        },
        {
            "location": "/templates/#demo",
            "text": "Ahora es tiempo de editar la p\u00e1gina y crear nuestra home replicando la del tema SOLID.",
            "title": "DEMO"
        },
        {
            "location": "/menu/",
            "text": "Men\u00fa y breadcrumbs\n\n\nshow_menu\n\n\nEl tag show_menu muestra la navegaci\u00f3n de la p\u00e1gina actual. Se pude adaptar el HTML si agrega una plantilla menu/menu. html a su proyecto o edita la que se proporciona con django CMS.\n\n\nshow_menu toma seis par\u00e1metros opcionales:\n\n\n\n\n\n\nstart_level\n (default=0): Desde qu\u00e9 nivel se debe mostrar la navegaci\u00f3n.  Si tenemos la home como nodo ra\u00edz (Nivel 0) y no queremos mostrarlo, configuraremos start_level a 1.\n\n\n\n\n\n\nend_level\n (default=100): En qu\u00e9 nivel debe detenerse la navegaci\u00f3n\n\n\n\n\n\n\nextra_inactive\n (default=0): Especifica cu\u00e1ntos niveles de navegaci\u00f3n deben mostrarse si un nodo no es un antepasado directo o descendiente del nodo activo actual.\n\n\n\n\n\n\nextra_active\n (default=100): Especifica cu\u00e1ntos niveles de descendientes del nodo activo actual deben visualizarse.\n\n\n\n\n\n\nnamespace: Especifica el espacio de nombres del men\u00fa. Si est\u00e1 vac\u00edo usar\u00e1 todos los espacios de nombres.\n\n\n\n\n\n\nroot_id: Especifica el id del nodo ra\u00edz.\n\n\n\n\n\n\ntemplate\n: Podemos proporcionar un par\u00e1metro de plantilla para que la sustituya.\n\n\n\n\n\n\nEjemplos:\n\n\n\n\nNavegaci\u00f3n completa (como lista anidada):\n\n\n\n\n{% load menu_tags %}\n<ul>\n    {% show_menu 0 100 100 100 %}\n</ul>\n\n\n\n\n\n\nNavegaci\u00f3n con \u00e1rbol activo (como lista anidada):\n\n\n\n\n<ul>\n    {% show_menu 0 100 0 100 %}\n</ul>\n\n\n\n\n\n\nNavegaci\u00f3n con un s\u00f3lo nivel extra activo:\n\n\n\n\n<ul>\n    {% show_menu 0 100 0 1 %}\n</ul>\n\n\n\n\n\n\nNavegaci\u00f3n de nivel 1 (como lista anidada):\n\n\n\n\n<ul>\n    {% show_menu 1 %}\n</ul>\n\n\n\n\n\n\nNavegaci\u00f3n con una plantilla personalizada:\n\n\n\n\n{% show_menu 0 100 100 100 \"myapp/menu.html\" %}\n\n\n\n\nUtilizaremos un s\u00f3lo nivel de navegaci\u00f3n para nuestro men\u00fa, as\u00ed que a\u00f1adimos \n{% show_menu 0 100 0 0 %}\n a nuestro \nbase.html\n\n\nshow_breadcrumb\n\n\nMuestra la miga de pan de la p\u00e1gina actual. Podemos personalizar este html como queramos pas\u00e1ndole el html en el template tag.\n\n\nNosotros mostraremos la miga de pan obviando el nodo ra\u00edz (la home, el 0), nos quedar\u00eda de la siguiente manera:\n\n\n{% show_breadcrumb 1 \"inc/breadcrumbs_inc.html\" %}\n\n\nCambios en plantilla base.html\n\n\nPara crear el \nmen\u00fa\n vamos a sacarlo a una template \nmenu.html\n.\n\n\n\n\nPrimero creamos un directorio \ninc\n dentro del directorio \ntemplates\n de nuestro proyecto\n\n\nSeguidamente creamos un \nmenu.html\n con el siguiente contenido (vamos a ir adaptando el c\u00f3digo del tema SOLID basado en bootstrap que hemos elegido el c\u00f3digo de django-cms ):\n\n\n\n\n{% load menu_tags %}\n\n<!-- Fixed navbar -->\n<div class=\"navbar navbar-default navbar-fixed-top\" role=\"navigation\">\n  <div class=\"container\">\n    <div class=\"navbar-header\">\n      <button type=\"button\" class=\"navbar-toggle\" data-toggle=\"collapse\" data-target=\".navbar-collapse\">\n        <span class=\"sr-only\">Toggle navigation</span>\n        <span class=\"icon-bar\"></span>\n        <span class=\"icon-bar\"></span>\n        <span class=\"icon-bar\"></span>\n      </button>\n      <a class=\"navbar-brand\" href=\"/\">PyConES 2017</a>\n    </div>\n    <div class=\"navbar-collapse collapse navbar-right\">\n      <ul class=\"nav navbar-nav\">\n          {% show_menu 0 100 0 0 \"inc/menu_inc.html\" %}\n      </ul>\n    </div><!--/.nav-collapse -->\n  </div>\n</div>\n\n\n\n\n\n\nPosteriormente creamos un \nmenu_inc.html\n al que hacemos referencia en el anterior \nmenu.html\n creado que ser\u00e1 la template con el que ir\u00e1 renderizado los puntos de men\u00fa:\n\n\n\n\n{% load menu_tags %}\n\n{% for child in children %}\n<li class=\"child{% if child.children %} dropdown{% endif %}{% if child.selected %} selected{% endif %}{% if child.ancestor %} ancestor{% endif %}{% if child.sibling %} sibling{% endif %}{% if child.descendant %} descendant{% endif %}\">\n    <a\n    {% if child.children %}class=\"dropdown-toggle\" data-toggle=\"dropdown\"{% endif %}\n    href=\"{{ child.attr.redirect_url|default:child.get_absolute_url }}\">\n    {{ child.get_menu_title }}\n    {% if child.children %} <b class=\"caret\"></b>{% endif %}\n  </a>\n    {% if child.children %}\n    <ul class=\"dropdown-menu\">\n        {% show_menu from_level to_level extra_inactive extra_active template \"\" \"\" child %}\n    </ul>\n    {% endif %}\n</li>\n{% endfor %}\n\n\n\n\n\n\nAhora ya tenemos nuestras plantillas de men\u00fa preparadas para sustituir en el bloque del \nbase.html\nas\u00ed que vamos a cambiar el men\u00fa que tra\u00eda la plantilla por defecto por el nuestro:\n\n\n\n\n<ul class=\"nav\">\n    {% show_menu 0 100 100 100 %}\n</ul>\n\n\n\n\ncon el siguiente bloque:\n\n\n{% include \"inc/menu.html\" %}\n\n\n\n\nPara crear el \nbreadcrumbs\n vamos a seguir la misma din\u00e1mica que con el men\u00fa.\n\n\n\n\nCreamos un fichero \nbreadcrumbs.html\n con el siguiente contenido dentro del directorio \ninc\n\n\n\n\n{% load menu_tags %}\n\n<div id=\"blue\">\n    <div class=\"container\">\n    <div class=\"row\">\n      {% show_breadcrumb 1 \"inc/breadcrumbs_inc.html\" %}\n    </div><!-- /row -->\n    </div> <!-- /container -->\n</div><!-- /blue -->\n\n\n\n\n\n\nCreamos otro fichero dentro del directorio \ninc\n llamado \nbreadcrumbs_inc.html\n con el siguiente contenido:\n\n\n\n\n{% for ance in ancestors %}\n    {% if not forloop.last %}\n    <a href=\"{{ ance.get_absolute_url }}\"><h3 style=\"display: inline\">{{ ance.get_menu_title }} &raquo; </h3></a> <span class=\"separator\"></span>\n    {% else %}\n    <span class=\"active\"><h3 style=\"display: inline\">{{ ance.get_menu_title }}</h3></span>\n    {% endif %}\n{% endfor %}\n\n\n\n\n\n\nPor \u00faltimo vamos a crear una nueva plantilla dentro del directorio \ntemplates\n llamada \nsobre_nosotros.html\n que ser\u00e1 la plantilla de la siguiente p\u00e1gina en la que vamos a trabajar los plugins, esta p\u00e1gina deber\u00e1 incluir el breadcrumbs:\n\n\n\n\n{% extends \"base.html\" %}\n{% load cms_tags %}\n\n{% block title %}{% page_attribute \"page_title\" %}{% endblock title %}\n\n{% block content %}\n    {% include \"inc/breadcrumbs.html\" %}\n    {% placeholder \"content\" %}\n{% endblock content %}\n\n\n\n\nTambi\u00e9n tendremos que a\u00f1adirla al \nCMS_TEMPLATES\n del \nsettings.py\n:\n\n\nCMS_TEMPLATES = (\n    ('fullwidth.html', 'Fullwidth'),\n    ('sidebar_left.html', 'Sidebar Left'),\n    ('sidebar_right.html', 'Sidebar Right')\n    ('home.html', 'Home'),\n    ('sobre_nosotros.html', 'Sobre nosotros'),\n)\n\n\n\n\nDEMO\n\n\nVamos a crear la p\u00e1gina \nsobre_nosotros\n replicando la del tema SOLID.",
            "title": "Men\u00fa"
        },
        {
            "location": "/menu/#menu-y-breadcrumbs",
            "text": "",
            "title": "Men\u00fa y breadcrumbs"
        },
        {
            "location": "/menu/#show_menu",
            "text": "El tag show_menu muestra la navegaci\u00f3n de la p\u00e1gina actual. Se pude adaptar el HTML si agrega una plantilla menu/menu. html a su proyecto o edita la que se proporciona con django CMS.  show_menu toma seis par\u00e1metros opcionales:    start_level  (default=0): Desde qu\u00e9 nivel se debe mostrar la navegaci\u00f3n.  Si tenemos la home como nodo ra\u00edz (Nivel 0) y no queremos mostrarlo, configuraremos start_level a 1.    end_level  (default=100): En qu\u00e9 nivel debe detenerse la navegaci\u00f3n    extra_inactive  (default=0): Especifica cu\u00e1ntos niveles de navegaci\u00f3n deben mostrarse si un nodo no es un antepasado directo o descendiente del nodo activo actual.    extra_active  (default=100): Especifica cu\u00e1ntos niveles de descendientes del nodo activo actual deben visualizarse.    namespace: Especifica el espacio de nombres del men\u00fa. Si est\u00e1 vac\u00edo usar\u00e1 todos los espacios de nombres.    root_id: Especifica el id del nodo ra\u00edz.    template : Podemos proporcionar un par\u00e1metro de plantilla para que la sustituya.",
            "title": "show_menu"
        },
        {
            "location": "/menu/#ejemplos",
            "text": "Navegaci\u00f3n completa (como lista anidada):   {% load menu_tags %}\n<ul>\n    {% show_menu 0 100 100 100 %}\n</ul>   Navegaci\u00f3n con \u00e1rbol activo (como lista anidada):   <ul>\n    {% show_menu 0 100 0 100 %}\n</ul>   Navegaci\u00f3n con un s\u00f3lo nivel extra activo:   <ul>\n    {% show_menu 0 100 0 1 %}\n</ul>   Navegaci\u00f3n de nivel 1 (como lista anidada):   <ul>\n    {% show_menu 1 %}\n</ul>   Navegaci\u00f3n con una plantilla personalizada:   {% show_menu 0 100 100 100 \"myapp/menu.html\" %}  Utilizaremos un s\u00f3lo nivel de navegaci\u00f3n para nuestro men\u00fa, as\u00ed que a\u00f1adimos  {% show_menu 0 100 0 0 %}  a nuestro  base.html",
            "title": "Ejemplos:"
        },
        {
            "location": "/menu/#show_breadcrumb",
            "text": "Muestra la miga de pan de la p\u00e1gina actual. Podemos personalizar este html como queramos pas\u00e1ndole el html en el template tag.  Nosotros mostraremos la miga de pan obviando el nodo ra\u00edz (la home, el 0), nos quedar\u00eda de la siguiente manera:  {% show_breadcrumb 1 \"inc/breadcrumbs_inc.html\" %}",
            "title": "show_breadcrumb"
        },
        {
            "location": "/menu/#cambios-en-plantilla-basehtml",
            "text": "Para crear el  men\u00fa  vamos a sacarlo a una template  menu.html .   Primero creamos un directorio  inc  dentro del directorio  templates  de nuestro proyecto  Seguidamente creamos un  menu.html  con el siguiente contenido (vamos a ir adaptando el c\u00f3digo del tema SOLID basado en bootstrap que hemos elegido el c\u00f3digo de django-cms ):   {% load menu_tags %}\n\n<!-- Fixed navbar -->\n<div class=\"navbar navbar-default navbar-fixed-top\" role=\"navigation\">\n  <div class=\"container\">\n    <div class=\"navbar-header\">\n      <button type=\"button\" class=\"navbar-toggle\" data-toggle=\"collapse\" data-target=\".navbar-collapse\">\n        <span class=\"sr-only\">Toggle navigation</span>\n        <span class=\"icon-bar\"></span>\n        <span class=\"icon-bar\"></span>\n        <span class=\"icon-bar\"></span>\n      </button>\n      <a class=\"navbar-brand\" href=\"/\">PyConES 2017</a>\n    </div>\n    <div class=\"navbar-collapse collapse navbar-right\">\n      <ul class=\"nav navbar-nav\">\n          {% show_menu 0 100 0 0 \"inc/menu_inc.html\" %}\n      </ul>\n    </div><!--/.nav-collapse -->\n  </div>\n</div>   Posteriormente creamos un  menu_inc.html  al que hacemos referencia en el anterior  menu.html  creado que ser\u00e1 la template con el que ir\u00e1 renderizado los puntos de men\u00fa:   {% load menu_tags %}\n\n{% for child in children %}\n<li class=\"child{% if child.children %} dropdown{% endif %}{% if child.selected %} selected{% endif %}{% if child.ancestor %} ancestor{% endif %}{% if child.sibling %} sibling{% endif %}{% if child.descendant %} descendant{% endif %}\">\n    <a\n    {% if child.children %}class=\"dropdown-toggle\" data-toggle=\"dropdown\"{% endif %}\n    href=\"{{ child.attr.redirect_url|default:child.get_absolute_url }}\">\n    {{ child.get_menu_title }}\n    {% if child.children %} <b class=\"caret\"></b>{% endif %}\n  </a>\n    {% if child.children %}\n    <ul class=\"dropdown-menu\">\n        {% show_menu from_level to_level extra_inactive extra_active template \"\" \"\" child %}\n    </ul>\n    {% endif %}\n</li>\n{% endfor %}   Ahora ya tenemos nuestras plantillas de men\u00fa preparadas para sustituir en el bloque del  base.html as\u00ed que vamos a cambiar el men\u00fa que tra\u00eda la plantilla por defecto por el nuestro:   <ul class=\"nav\">\n    {% show_menu 0 100 100 100 %}\n</ul>  con el siguiente bloque:  {% include \"inc/menu.html\" %}  Para crear el  breadcrumbs  vamos a seguir la misma din\u00e1mica que con el men\u00fa.   Creamos un fichero  breadcrumbs.html  con el siguiente contenido dentro del directorio  inc   {% load menu_tags %}\n\n<div id=\"blue\">\n    <div class=\"container\">\n    <div class=\"row\">\n      {% show_breadcrumb 1 \"inc/breadcrumbs_inc.html\" %}\n    </div><!-- /row -->\n    </div> <!-- /container -->\n</div><!-- /blue -->   Creamos otro fichero dentro del directorio  inc  llamado  breadcrumbs_inc.html  con el siguiente contenido:   {% for ance in ancestors %}\n    {% if not forloop.last %}\n    <a href=\"{{ ance.get_absolute_url }}\"><h3 style=\"display: inline\">{{ ance.get_menu_title }} &raquo; </h3></a> <span class=\"separator\"></span>\n    {% else %}\n    <span class=\"active\"><h3 style=\"display: inline\">{{ ance.get_menu_title }}</h3></span>\n    {% endif %}\n{% endfor %}   Por \u00faltimo vamos a crear una nueva plantilla dentro del directorio  templates  llamada  sobre_nosotros.html  que ser\u00e1 la plantilla de la siguiente p\u00e1gina en la que vamos a trabajar los plugins, esta p\u00e1gina deber\u00e1 incluir el breadcrumbs:   {% extends \"base.html\" %}\n{% load cms_tags %}\n\n{% block title %}{% page_attribute \"page_title\" %}{% endblock title %}\n\n{% block content %}\n    {% include \"inc/breadcrumbs.html\" %}\n    {% placeholder \"content\" %}\n{% endblock content %}  Tambi\u00e9n tendremos que a\u00f1adirla al  CMS_TEMPLATES  del  settings.py :  CMS_TEMPLATES = (\n    ('fullwidth.html', 'Fullwidth'),\n    ('sidebar_left.html', 'Sidebar Left'),\n    ('sidebar_right.html', 'Sidebar Right')\n    ('home.html', 'Home'),\n    ('sobre_nosotros.html', 'Sobre nosotros'),\n)",
            "title": "Cambios en plantilla base.html"
        },
        {
            "location": "/menu/#demo",
            "text": "Vamos a crear la p\u00e1gina  sobre_nosotros  replicando la del tema SOLID.",
            "title": "DEMO"
        },
        {
            "location": "/plugins/",
            "text": "Plugins\n\n\nEn la p\u00e1gina \nsobre_nosotros\n nos hab\u00edamos quedado en el apartado \"conoce a nuestro equipo\". Este apartado es muy propicio para introducir los \ncustom plugins\n de django CMS.\n\n\nLos CMS Plugins son contenidos reutilizables que pueden ser insertados en las p\u00e1ginas CMS de django (o en cualquier contenido que utilice los placeholders de django CMS). Permiten la publicaci\u00f3n autom\u00e1tica de la informaci\u00f3n, sin necesidad de intervenci\u00f3n adicional.\n\n\n\u00bfPor qu\u00e9 necesitas escribir un plugin?\n\n\nLos plugins son la forma m\u00e1s conveniente de integrar contenido de otra aplicaci\u00f3n de Django en una p\u00e1gina CMS de django.\n\n\nPor ejemplo, suponga que est\u00e1 desarrollando un sitio para una compa\u00f1\u00eda discogr\u00e1fica en django CMS. Puede querer tener un cuadro de \"\u00daltimos lanzamientos\" en la p\u00e1gina principal de su sitio.\n\n\nPor supuesto, cada cierto tiempo pod\u00edas editar esa p\u00e1gina y actualizar la informaci\u00f3n. Sin embargo, una compa\u00f1\u00eda discogr\u00e1fica sensata tambi\u00e9n gestionar\u00e1 su cat\u00e1logo en Django, lo que significa que Django ya sabe cu\u00e1les son las novedades de esta semana.\n\n\nEsta es una excelente oportunidad para hacer uso de esa informaci\u00f3n para hacer su vida m\u00e1s f\u00e1cil - todo lo que necesita hacer es crear un plugin de CMS django que puede insertar en su p\u00e1gina de inicio, y dejar que haga el trabajo de publicar informaci\u00f3n sobre las \u00faltimas versiones.\n\n\nLos plugins son reutilizables. Tal vez su compa\u00f1\u00eda discogr\u00e1fica est\u00e1 produciendo una serie de reediciones de discos de carnaval semanales... en la p\u00e1gina de su sitio web sobre la serie, podr\u00eda insertar el mismo plugin, configurado de forma un poco diferente, que publicar\u00e1 informaci\u00f3n sobre los nuevos lanzamientos recientes de esa serie.\n\n\nVersi\u00f3n r\u00e1pida\n\n\nUn plugin de django CMS est\u00e1 compuesto fundamentalmente de tres cosas.\n\n\n\n\nun plugin editor, para configurar un plugin cada vez que se despliega\n\n\nun plugin publisher, para hacer el trabajo automatizado de decidir qu\u00e9 publicar\n\n\nun plugin template, para convertir la informaci\u00f3n en una p\u00e1gina web\n\n\n\n\nEstos corresponden al esquema de Modelo-Vista-Controlador que ya conocemos:\n\n\n\n\nEl modelo de plugin para almacenar su configuraci\u00f3n\n\n\nLa vista de plugin que resuelve lo que necesita ser visualizado\n\n\nLa plantilla de plugin para renderizar la informaci\u00f3n\n\n\n\n\nY para construir tu plugin, lo har\u00e1s a partir de:\n\n\n\n\nUna subclase de modelos \ncms.pluginmodel.CMSPlugin\n para almacenar la configuraci\u00f3n de las instancias de plugins\n\n\nUna subclase de \ncms.plugin_base.CMSPluginBase\n que define la l\u00f3gica de su plugin\n\n\nUna plantilla que muestra su plugin\n\n\n\n\nPasos a seguir para crear nuesto plugins de Empleados\n\n\nPrimero vamos a crear una nueva app django en nuestro proyecto d\u00f3nde vamos a gestionar estos plugins:\n\n\npython manage.py startapp my_web_cms\n\n\nSeguidamente vamos a crear nuestro modelo de plugin en el fichero \nmodels.py\n:\n\n\nfrom django.db import models\nfrom filer.fields.image import FilerImageField\nfrom cms.models.pluginmodel import CMSPlugin\nfrom django.utils.translation import ugettext_lazy as _\n\n\nclass EmpleadosPluginModel(CMSPlugin):\n    titulo = models.CharField(max_length=50)\n\n    def copy_relations(self, oldinstance):\n        # Before copying related objects from the old instance, the ones\n        # on the current one need to be deleted. Otherwise, duplicates may\n        # appear on the public version of the page\n        self.empleado_item.all().delete()\n\n        for empleado_item in oldinstance.empleado_item.all():\n            # instance.pk = None; instance.pk.save() is the slightly odd but\n            # standard Django way of copying a saved model instance\n            empleado_item.pk = None\n            empleado_item.plugin = self\n            empleado_item.save()\n\n    def __str__(self):\n        return self.titulo\n\n\nclass Empleado(models.Model):\n    nombre = models.CharField(\n        max_length=250,\n        verbose_name=_(\"Nombre\"),\n        null=False, blank=False\n    )\n    apellidos = models.CharField(\n        max_length=250,\n        verbose_name=_(\"Apellidos\"),\n        null=False, blank=False\n    )\n    cargo = models.CharField(\n        max_length=250,\n        verbose_name=_(\"Cargo\"),\n        null=False, blank=False\n    )\n    descripcion = models.CharField(\n        max_length=250,\n        verbose_name=_(\"Descripci\u00f3n\"),\n        null=False, blank=False\n    )\n    twitter = models.URLField(\n        verbose_name=_(\"Usuario de twitter\"),\n        null=False, blank=True\n    )\n    email = models.EmailField(\n        verbose_name=_(\"Correo electr\u00f3nico\"),\n        null=False, blank=True\n    )\n    foto = FilerImageField(verbose_name=\"Foto\", null=False, blank=False)\n    plugin = models.ForeignKey(\n        EmpleadosPluginModel,\n        related_name=\"empleado_item\"\n    )\n\n    @property\n    def nombre_completo(self):\n        full_name = \"{nombre} {apellidos}\".format(nombre=self.nombre, apellidos=self.apellidos)\n        return full_name.strip()\n\n    def __str__(self):\n        return self.nombre_completo\n\n\n\n\n\nEl siguiente paso es a\u00f1adir nuestra app a \nINSTALLED_APPS\n en el fichero \nsettings.py\n para posteriormente crear y aplicar las migraci\u00f3n para este nuevo modelo que hemos creado.\n\n\npython manage.py makemigrations\n\n\npython manage.py migrate\n\n\nLlegados a este punto ya tenemos nuestro modelo de plugin, hemos cumplido con el paso 1, el siguiente es crear nuestra vista plugin que tenga la l\u00f3gica. Vamos a crear un fichero \ncms_plugins.py\n donde estar\u00e1 nuestro plugin:\n\n\nfrom cms.plugin_base import CMSPluginBase\nfrom cms.plugin_pool import plugin_pool\nfrom django.utils.translation import ugettext_lazy as _\nfrom django.contrib import admin\nfrom .models import EmpleadosPluginModel, Empleado\n\n\nclass EmpleadoInlineAdmin(admin.StackedInline):\n    model = Empleado\n\n\nclass EmpleadosPlugin(CMSPluginBase):\n    model = EmpleadosPluginModel\n    name = _(\"Empleados Plugin\")\n    render_template = \"plugins/empleados_plugin.html\"\n    inlines = (EmpleadoInlineAdmin, )\n    cache = False\n\n    def render(self, context, instance, placeholder):\n        context = super(EmpleadosPlugin, self).render(context, instance, placeholder)\n        empleados = instance.empleado_item.all()\n        context.update({\n            'empleados': empleados\n        })\n        return context\n\nplugin_pool.register_plugin(EmpleadosPlugin)\n\n\n\n\nPerfecto, hemos cumplido con el 2\u00ba paso. Ahora vamos a por el \u00faltimo, hemos definido en la vista de plugin que la \nrender_template\n es \nplugins/empleados_plugin.html\n por lo tanto tenemos que crear un directorio plugins dentro del directorio templates dentro de nuestra app y dentro crear el fichero \nempleados_plugin.html\n con el siguiente contenido:\n\n\n<div class=\"container mtb\">\n <div class=\"row centered\">\n   <h3 class=\"mb\">{{ instance.titulo}}</h3>\n   {% for empleado in empleados %}\n   <div class=\"col-lg-3 col-md-3 col-sm-3\">\n     <div class=\"he-wrap tpl6\">\n     <img src=\"{{ empleado.foto.url }}\" alt=\"\">\n       <div class=\"he-view\">\n         <div class=\"bg a0\" data-animate=\"fadeIn\">\n                         <h3 class=\"a1\" data-animate=\"fadeInDown\">Contact Me:</h3>\n                         <a href=\"{{empleado.email}}\" class=\"dmbutton a2\" data-animate=\"fadeInUp\"><i class=\"fa fa-envelope\"></i></a>\n                         <a href=\"{{empleado.twitter}}\" class=\"dmbutton a2\" data-animate=\"fadeInUp\"><i class=\"fa fa-twitter\"></i></a>\n                   </div><!-- he bg -->\n       </div><!-- he view -->\n     </div><!-- he wrap -->\n     <h4>{{empleado.nombre_completo}}</h4>\n     <h5 class=\"ctitle\">{{empleado.cargo}}</h5>\n     <p>{{empleado.descripcion}}</p>\n     <div class=\"hline\"></div>\n   </div><! --/col-lg-3 -->\n   {% endfor %}\n </div><! --/row -->\n</div><! --/container -->\n\n\n\n\nTu aplicaci\u00f3n django debe ser parecida a la siguiente:\n\n\n\n\nDEMO\n\n\nVamos a a\u00f1adir nuestro nuevo plugin en el placeholder contenido de la p\u00e1gina \nsobre_nosotros\n.",
            "title": "Plugins"
        },
        {
            "location": "/plugins/#plugins",
            "text": "En la p\u00e1gina  sobre_nosotros  nos hab\u00edamos quedado en el apartado \"conoce a nuestro equipo\". Este apartado es muy propicio para introducir los  custom plugins  de django CMS.  Los CMS Plugins son contenidos reutilizables que pueden ser insertados en las p\u00e1ginas CMS de django (o en cualquier contenido que utilice los placeholders de django CMS). Permiten la publicaci\u00f3n autom\u00e1tica de la informaci\u00f3n, sin necesidad de intervenci\u00f3n adicional.",
            "title": "Plugins"
        },
        {
            "location": "/plugins/#por-que-necesitas-escribir-un-plugin",
            "text": "Los plugins son la forma m\u00e1s conveniente de integrar contenido de otra aplicaci\u00f3n de Django en una p\u00e1gina CMS de django.  Por ejemplo, suponga que est\u00e1 desarrollando un sitio para una compa\u00f1\u00eda discogr\u00e1fica en django CMS. Puede querer tener un cuadro de \"\u00daltimos lanzamientos\" en la p\u00e1gina principal de su sitio.  Por supuesto, cada cierto tiempo pod\u00edas editar esa p\u00e1gina y actualizar la informaci\u00f3n. Sin embargo, una compa\u00f1\u00eda discogr\u00e1fica sensata tambi\u00e9n gestionar\u00e1 su cat\u00e1logo en Django, lo que significa que Django ya sabe cu\u00e1les son las novedades de esta semana.  Esta es una excelente oportunidad para hacer uso de esa informaci\u00f3n para hacer su vida m\u00e1s f\u00e1cil - todo lo que necesita hacer es crear un plugin de CMS django que puede insertar en su p\u00e1gina de inicio, y dejar que haga el trabajo de publicar informaci\u00f3n sobre las \u00faltimas versiones.  Los plugins son reutilizables. Tal vez su compa\u00f1\u00eda discogr\u00e1fica est\u00e1 produciendo una serie de reediciones de discos de carnaval semanales... en la p\u00e1gina de su sitio web sobre la serie, podr\u00eda insertar el mismo plugin, configurado de forma un poco diferente, que publicar\u00e1 informaci\u00f3n sobre los nuevos lanzamientos recientes de esa serie.",
            "title": "\u00bfPor qu\u00e9 necesitas escribir un plugin?"
        },
        {
            "location": "/plugins/#version-rapida",
            "text": "Un plugin de django CMS est\u00e1 compuesto fundamentalmente de tres cosas.   un plugin editor, para configurar un plugin cada vez que se despliega  un plugin publisher, para hacer el trabajo automatizado de decidir qu\u00e9 publicar  un plugin template, para convertir la informaci\u00f3n en una p\u00e1gina web   Estos corresponden al esquema de Modelo-Vista-Controlador que ya conocemos:   El modelo de plugin para almacenar su configuraci\u00f3n  La vista de plugin que resuelve lo que necesita ser visualizado  La plantilla de plugin para renderizar la informaci\u00f3n   Y para construir tu plugin, lo har\u00e1s a partir de:   Una subclase de modelos  cms.pluginmodel.CMSPlugin  para almacenar la configuraci\u00f3n de las instancias de plugins  Una subclase de  cms.plugin_base.CMSPluginBase  que define la l\u00f3gica de su plugin  Una plantilla que muestra su plugin",
            "title": "Versi\u00f3n r\u00e1pida"
        },
        {
            "location": "/plugins/#pasos-a-seguir-para-crear-nuesto-plugins-de-empleados",
            "text": "Primero vamos a crear una nueva app django en nuestro proyecto d\u00f3nde vamos a gestionar estos plugins:  python manage.py startapp my_web_cms  Seguidamente vamos a crear nuestro modelo de plugin en el fichero  models.py :  from django.db import models\nfrom filer.fields.image import FilerImageField\nfrom cms.models.pluginmodel import CMSPlugin\nfrom django.utils.translation import ugettext_lazy as _\n\n\nclass EmpleadosPluginModel(CMSPlugin):\n    titulo = models.CharField(max_length=50)\n\n    def copy_relations(self, oldinstance):\n        # Before copying related objects from the old instance, the ones\n        # on the current one need to be deleted. Otherwise, duplicates may\n        # appear on the public version of the page\n        self.empleado_item.all().delete()\n\n        for empleado_item in oldinstance.empleado_item.all():\n            # instance.pk = None; instance.pk.save() is the slightly odd but\n            # standard Django way of copying a saved model instance\n            empleado_item.pk = None\n            empleado_item.plugin = self\n            empleado_item.save()\n\n    def __str__(self):\n        return self.titulo\n\n\nclass Empleado(models.Model):\n    nombre = models.CharField(\n        max_length=250,\n        verbose_name=_(\"Nombre\"),\n        null=False, blank=False\n    )\n    apellidos = models.CharField(\n        max_length=250,\n        verbose_name=_(\"Apellidos\"),\n        null=False, blank=False\n    )\n    cargo = models.CharField(\n        max_length=250,\n        verbose_name=_(\"Cargo\"),\n        null=False, blank=False\n    )\n    descripcion = models.CharField(\n        max_length=250,\n        verbose_name=_(\"Descripci\u00f3n\"),\n        null=False, blank=False\n    )\n    twitter = models.URLField(\n        verbose_name=_(\"Usuario de twitter\"),\n        null=False, blank=True\n    )\n    email = models.EmailField(\n        verbose_name=_(\"Correo electr\u00f3nico\"),\n        null=False, blank=True\n    )\n    foto = FilerImageField(verbose_name=\"Foto\", null=False, blank=False)\n    plugin = models.ForeignKey(\n        EmpleadosPluginModel,\n        related_name=\"empleado_item\"\n    )\n\n    @property\n    def nombre_completo(self):\n        full_name = \"{nombre} {apellidos}\".format(nombre=self.nombre, apellidos=self.apellidos)\n        return full_name.strip()\n\n    def __str__(self):\n        return self.nombre_completo  El siguiente paso es a\u00f1adir nuestra app a  INSTALLED_APPS  en el fichero  settings.py  para posteriormente crear y aplicar las migraci\u00f3n para este nuevo modelo que hemos creado.  python manage.py makemigrations  python manage.py migrate  Llegados a este punto ya tenemos nuestro modelo de plugin, hemos cumplido con el paso 1, el siguiente es crear nuestra vista plugin que tenga la l\u00f3gica. Vamos a crear un fichero  cms_plugins.py  donde estar\u00e1 nuestro plugin:  from cms.plugin_base import CMSPluginBase\nfrom cms.plugin_pool import plugin_pool\nfrom django.utils.translation import ugettext_lazy as _\nfrom django.contrib import admin\nfrom .models import EmpleadosPluginModel, Empleado\n\n\nclass EmpleadoInlineAdmin(admin.StackedInline):\n    model = Empleado\n\n\nclass EmpleadosPlugin(CMSPluginBase):\n    model = EmpleadosPluginModel\n    name = _(\"Empleados Plugin\")\n    render_template = \"plugins/empleados_plugin.html\"\n    inlines = (EmpleadoInlineAdmin, )\n    cache = False\n\n    def render(self, context, instance, placeholder):\n        context = super(EmpleadosPlugin, self).render(context, instance, placeholder)\n        empleados = instance.empleado_item.all()\n        context.update({\n            'empleados': empleados\n        })\n        return context\n\nplugin_pool.register_plugin(EmpleadosPlugin)  Perfecto, hemos cumplido con el 2\u00ba paso. Ahora vamos a por el \u00faltimo, hemos definido en la vista de plugin que la  render_template  es  plugins/empleados_plugin.html  por lo tanto tenemos que crear un directorio plugins dentro del directorio templates dentro de nuestra app y dentro crear el fichero  empleados_plugin.html  con el siguiente contenido:  <div class=\"container mtb\">\n <div class=\"row centered\">\n   <h3 class=\"mb\">{{ instance.titulo}}</h3>\n   {% for empleado in empleados %}\n   <div class=\"col-lg-3 col-md-3 col-sm-3\">\n     <div class=\"he-wrap tpl6\">\n     <img src=\"{{ empleado.foto.url }}\" alt=\"\">\n       <div class=\"he-view\">\n         <div class=\"bg a0\" data-animate=\"fadeIn\">\n                         <h3 class=\"a1\" data-animate=\"fadeInDown\">Contact Me:</h3>\n                         <a href=\"{{empleado.email}}\" class=\"dmbutton a2\" data-animate=\"fadeInUp\"><i class=\"fa fa-envelope\"></i></a>\n                         <a href=\"{{empleado.twitter}}\" class=\"dmbutton a2\" data-animate=\"fadeInUp\"><i class=\"fa fa-twitter\"></i></a>\n                   </div><!-- he bg -->\n       </div><!-- he view -->\n     </div><!-- he wrap -->\n     <h4>{{empleado.nombre_completo}}</h4>\n     <h5 class=\"ctitle\">{{empleado.cargo}}</h5>\n     <p>{{empleado.descripcion}}</p>\n     <div class=\"hline\"></div>\n   </div><! --/col-lg-3 -->\n   {% endfor %}\n </div><! --/row -->\n</div><! --/container -->  Tu aplicaci\u00f3n django debe ser parecida a la siguiente:",
            "title": "Pasos a seguir para crear nuesto plugins de Empleados"
        },
        {
            "location": "/plugins/#demo",
            "text": "Vamos a a\u00f1adir nuestro nuevo plugin en el placeholder contenido de la p\u00e1gina  sobre_nosotros .",
            "title": "DEMO"
        },
        {
            "location": "/apphooks/",
            "text": "Apphooks: Integraci\u00f3n de aplicaciones Django en Django-CMS\n\n\nLa integraci\u00f3n de otras aplicaciones en django CMS, que es de donde proviene una gran parte de su poder.\n\n\nIntegrar aplicaciones no s\u00f3lo significa instalarlas junto a django CMS, para que coexistan pac\u00edficamente. Significa utilizar las caracter\u00edsticas de django CMS para construir un \u00fanico proyecto web coherente que acelere el trabajo de gesti\u00f3n del sitio y haga posible una publicaci\u00f3n m\u00e1s automatizada y enriquecida.\n\n\nEs clave para que la integraci\u00f3n de django CMS funcione, no requiere que modifiquemos otras aplicaciones a menos que lo deseemos. Esto es particularmente importante cuando estamos utilizando aplicaciones de terceros y no queremos tener que mantener nuestras propios forks. (La \u00fanica excepci\u00f3n a esto es si decidimos construir caracter\u00edsticas de django CMS directamente en las propias aplicaciones, por ejemplo cuando se utiliza marcadores de posici\u00f3n en otras aplicaciones).\n\n\nVeamos el \nejemplo\n. de la documentaci\u00f3n oficial de django CMS:\n\n\nIntegraci\u00f3n de third-party application\n\n\nYa sabemos crear nuestros propios plugins y aplicaciones CMS django, pero otro punto importante es extender nuestro CMS con una aplicaci\u00f3n de terceros. Para ello vamos a integrar la aplicaci\u00f3n \nAldryn News & Blog\n.\n\n\n\n\nInstalamos la dependencia con pip\n\n\n\n\npip install aldryn-newsblog\n\n\n\n\nA\u00f1adimos a \nINSTALLED_APPS\n en el fichero \nsettings.py\n deber\u00eda quedar algo as\u00ed:\n\n\n\n\nINSTALLED_APPS = (\n    'djangocms_admin_style',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.admin',\n    'django.contrib.sites',\n    'django.contrib.sitemaps',\n    'django.contrib.staticfiles',\n    'django.contrib.messages',\n    'cms',\n    'menus',\n    'sekizai',\n    'treebeard',\n    'djangocms_text_ckeditor',\n    'filer',\n    'easy_thumbnails',\n    'djangocms_column',\n    'djangocms_link',\n    'cmsplugin_filer_file',\n    'cmsplugin_filer_folder',\n    'cmsplugin_filer_image',\n    'cmsplugin_filer_utils',\n    'djangocms_style',\n    'djangocms_snippet',\n    'djangocms_googlemap',\n    'djangocms_video',\n    'mi_web',\n    'my_web_cms',\n    'aldryn_apphooks_config',\n    'aldryn_categories',\n    'aldryn_common',\n    'aldryn_newsblog',\n    'aldryn_people',\n    'aldryn_reversion',\n    'aldryn_translation_tools',\n    'parler',\n    'sortedm2m',\n    'taggit',\n    'reversion',\n    'aldryn_boilerplates',\n)\n\n\n\n\n\n\nAhora hacemos la migraci\u00f3n en base de datos:\n\n\n\n\npython manage.py migrate\n\n\n\n\nEl siguiente punto es crear una p\u00e1gina con el hook a la aplicaci\u00f3n:\n\n\nCrear una p\u00e1gina CMS django y la llamamos \"Blog\".\n\n\nEn Configuraci\u00f3n avanzada... > Configuraci\u00f3n de aplicaciones, seleccione NewsBlog.\n\n\n\n\n\n\n\n\nComo podemos ver en la imagen inferior ahora en la p\u00e1gina de blog tenemos un nuevo punto de men\u00fa en el toolbar.\n\n\n\n\nA\u00f1adimos un par de art\u00edculos y podemos comprobar que ya est\u00e1 totalmente integrada nuestro blog pero... \u00a1Qu\u00e9 feo se ve!. Vamos a adaptar las plantillas con las del tema SOLID:\n\n\n\n\n\n\nLo primero es descargarnos el directorio \naldryn_newsblog\n que est\u00e1 dentro del directorio templates de la aplicaci\u00f3n. Podemos hacerlo con un \ncp\n desde el entorno virtual o descargando del repositorio la app.\n\n\n\n\n\n\nAhora ponemos ese directorio dentro del directorio templates de nuestro proyecto, deber\u00edamos tener algo as\u00ed:\n\n\n\n\n\n\n\n\nAhora vamos a sobreescribir las templates que necesitamos:\n\n\n\n\nbase.html\n\n\n\n\n{% extends CMS_TEMPLATE %}\n{% load cms_tags %}\n\n{% block content %}\n  <div class=\"container mtb\">\n       <div class=\"row\">\n         <! -- BLOG POSTS LIST -->\n         <div class=\"col-lg-8\">\n          {% block newsblog_content %}\n              {# article_list.html and article_detail.html extend this template #}\n          {% endblock %}\n        </div><! --/col-lg-8 -->\n        <! -- SIDEBAR -->\n        <div class=\"col-lg-4\">\n          {% placeholder \"sidebar\" %}\n        </div>\n      </div><! --/row -->\n     </div><! --/container -->\n{% endblock content %}\n\n\n\n\n\n\narticle_detail.html\n\n\n\n\n{% extends \"aldryn_newsblog/base.html\" %}\n{% load i18n cms_tags apphooks_config_tags %}\n\n{% block title %}\n    {{ article.title }} - {{ block.super }}\n{% endblock %}\n\n{% block newsblog_content %}\n    {% include \"aldryn_newsblog/includes/article.html\" with detail_view=\"true\" %}\n    {% static_placeholder \"newsblog_social\" %}\n{% endblock %}\n\n\n\n\n\n\nincludes/article.html\n\n\n\n\n{% load i18n staticfiles thumbnail cms_tags apphooks_config_tags %}\n\n{% if article.featured_image_id %}\n  <img class=\"img-responsive\" src=\"{% thumbnail article.featured_image 800x450 crop subject_location=article.featured_image.subject_location %}\" alt=\"{{ article.featured_image.alt }}\">\n{% endif %}\n\n{% if detail_view %}\n    <h3 class=\"ctitle\">{% render_model article \"title\" %}</h3>\n{% else %}\n    <a href=\"{% namespace_url 'article-detail' article.slug namespace=namespace default='' %}\"><h3 class=\"ctitle\">{% render_model article \"title\" %}</h3></a>\n{% endif %}\n\n<p><csmall>Posted: {{ article.publishing_date|date }}</csmall> | <csmall2>By: {% include \"aldryn_newsblog/includes/author.html\" with author=article.author %}</csmall2></p>\n{% render_model article \"lead_in\" %}\n\n{% if detail_view %}\n    {% render_placeholder article.content language placeholder_language %}\n{% else %}\n  <p><a href=\"{% namespace_url 'article-detail' article.slug namespace=namespace default='' %}\">[Read More]</a></p>\n  <div class=\"hline\"></div>\n  <div class=\"spacing\"></div>\n{% endif %}\n\n\n\n\n\n\nincludes/author.html\n\n\n\n\n{% load i18n staticfiles thumbnail apphooks_config_tags %}\n\n{% if author %}\n        <a href=\"{% namespace_url \"article-list-by-author\" author.slug namespace=namespace default='' %}\">\n            {% if author.visual %}\n                {% thumbnail author.visual \"50x50\" crop upscale subject_location=author.visual.subject_location as author_image %}\n                <img src=\"{{ author_image.url }}\" width=\"50\" height=\"50\" alt=\"{{ author.name }}\">\n            {% endif %}\n            {{ author.name }}\n        </a>\n    {% if author.function %}<p>{{ author.function }}</p>{% endif %}\n    {% if author.article_count %}<p>{{ author.article_count }}</p>{% endif %}\n{% endif %}\n\n\n\n\n\n\nplugins/tags.html\n\n\n\n\n{% load i18n apphooks_config_tags %}\n\n<h4>Popular Tags</h4>\n<div class=\"hline\"></div>\n<p>\n  {% for tag in tags %}\n    <a class=\"btn btn-theme\" href=\"{% namespace_url \"article-list-by-tag\" tag.slug namespace=instance.app_config.namespace default='' %}\" role=\"button\">{{ tag.name }}</a>\n  {% endfor %}\n</p>\n\n\n\n\n\n\n\nplugins/latest_articles.html\n\n\n\n\n{% load i18n staticfiles thumbnail cms_tags apphooks_config_tags %}\n\n\n<h4>Recent Posts</h4>\n<div class=\"hline\"></div>\n  <ul class=\"popular-posts\">\n\n{% for article in article_list %}\n    <li>\n      {% if article.featured_image_id %}\n        <a href=\"{% namespace_url 'article-detail' article.slug namespace=namespace default='' %}\">\n          <img class=\"img-responsive\" src=\"{% thumbnail article.featured_image 70x70 crop subject_location=article.featured_image.subject_location %}\"\n          alt=\"{{ article.featured_image.alt }}\">\n        </a>\n      {% endif %}\n        <h4><a href=\"{% namespace_url 'article-detail' article.slug namespace=namespace default='' %}\">{{ article.title }}</a></h4>\n        <em>Posted: {{ article.publishing_date|date }}</em>\n    </li>\n{% empty %}\n    <p>{% trans \"No items available\" %}</p>\n{% endfor %}\n\n<div class=\"spacing\"></div>\n\n\n\n\n\n\nplugins/categories.html\n\n\n\n\n{% load i18n apphooks_config_tags %}\n\n\n<h4>Categories</h4>\n<div class=\"hline\"></div>\n{% for category in categories %}\n    <p {% if newsblog_category.id == category.id %} class=\"active\"{% endif %}>\n      <a href=\"{% namespace_url \"article-list-by-category\" category.slug namespace=instance.app_config.namespace default='' %}\">\n        <i class=\"fa fa-angle-right\"></i>\n        {{ category.name }}\n      </a>\n      <span class=\"badge badge-theme pull-right\">{{ category.article_count }}</span>\n    </p>\n{% endfor %}\n<div class=\"spacing\"></div>",
            "title": "Apphooks"
        },
        {
            "location": "/apphooks/#apphooks-integracion-de-aplicaciones-django-en-django-cms",
            "text": "La integraci\u00f3n de otras aplicaciones en django CMS, que es de donde proviene una gran parte de su poder.  Integrar aplicaciones no s\u00f3lo significa instalarlas junto a django CMS, para que coexistan pac\u00edficamente. Significa utilizar las caracter\u00edsticas de django CMS para construir un \u00fanico proyecto web coherente que acelere el trabajo de gesti\u00f3n del sitio y haga posible una publicaci\u00f3n m\u00e1s automatizada y enriquecida.  Es clave para que la integraci\u00f3n de django CMS funcione, no requiere que modifiquemos otras aplicaciones a menos que lo deseemos. Esto es particularmente importante cuando estamos utilizando aplicaciones de terceros y no queremos tener que mantener nuestras propios forks. (La \u00fanica excepci\u00f3n a esto es si decidimos construir caracter\u00edsticas de django CMS directamente en las propias aplicaciones, por ejemplo cuando se utiliza marcadores de posici\u00f3n en otras aplicaciones).  Veamos el  ejemplo . de la documentaci\u00f3n oficial de django CMS:",
            "title": "Apphooks: Integraci\u00f3n de aplicaciones Django en Django-CMS"
        },
        {
            "location": "/apphooks/#integracion-de-third-party-application",
            "text": "Ya sabemos crear nuestros propios plugins y aplicaciones CMS django, pero otro punto importante es extender nuestro CMS con una aplicaci\u00f3n de terceros. Para ello vamos a integrar la aplicaci\u00f3n  Aldryn News & Blog .   Instalamos la dependencia con pip   pip install aldryn-newsblog   A\u00f1adimos a  INSTALLED_APPS  en el fichero  settings.py  deber\u00eda quedar algo as\u00ed:   INSTALLED_APPS = (\n    'djangocms_admin_style',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.admin',\n    'django.contrib.sites',\n    'django.contrib.sitemaps',\n    'django.contrib.staticfiles',\n    'django.contrib.messages',\n    'cms',\n    'menus',\n    'sekizai',\n    'treebeard',\n    'djangocms_text_ckeditor',\n    'filer',\n    'easy_thumbnails',\n    'djangocms_column',\n    'djangocms_link',\n    'cmsplugin_filer_file',\n    'cmsplugin_filer_folder',\n    'cmsplugin_filer_image',\n    'cmsplugin_filer_utils',\n    'djangocms_style',\n    'djangocms_snippet',\n    'djangocms_googlemap',\n    'djangocms_video',\n    'mi_web',\n    'my_web_cms',\n    'aldryn_apphooks_config',\n    'aldryn_categories',\n    'aldryn_common',\n    'aldryn_newsblog',\n    'aldryn_people',\n    'aldryn_reversion',\n    'aldryn_translation_tools',\n    'parler',\n    'sortedm2m',\n    'taggit',\n    'reversion',\n    'aldryn_boilerplates',\n)   Ahora hacemos la migraci\u00f3n en base de datos:   python manage.py migrate   El siguiente punto es crear una p\u00e1gina con el hook a la aplicaci\u00f3n:  Crear una p\u00e1gina CMS django y la llamamos \"Blog\".  En Configuraci\u00f3n avanzada... > Configuraci\u00f3n de aplicaciones, seleccione NewsBlog.     Como podemos ver en la imagen inferior ahora en la p\u00e1gina de blog tenemos un nuevo punto de men\u00fa en el toolbar.   A\u00f1adimos un par de art\u00edculos y podemos comprobar que ya est\u00e1 totalmente integrada nuestro blog pero... \u00a1Qu\u00e9 feo se ve!. Vamos a adaptar las plantillas con las del tema SOLID:    Lo primero es descargarnos el directorio  aldryn_newsblog  que est\u00e1 dentro del directorio templates de la aplicaci\u00f3n. Podemos hacerlo con un  cp  desde el entorno virtual o descargando del repositorio la app.    Ahora ponemos ese directorio dentro del directorio templates de nuestro proyecto, deber\u00edamos tener algo as\u00ed:     Ahora vamos a sobreescribir las templates que necesitamos:   base.html   {% extends CMS_TEMPLATE %}\n{% load cms_tags %}\n\n{% block content %}\n  <div class=\"container mtb\">\n       <div class=\"row\">\n         <! -- BLOG POSTS LIST -->\n         <div class=\"col-lg-8\">\n          {% block newsblog_content %}\n              {# article_list.html and article_detail.html extend this template #}\n          {% endblock %}\n        </div><! --/col-lg-8 -->\n        <! -- SIDEBAR -->\n        <div class=\"col-lg-4\">\n          {% placeholder \"sidebar\" %}\n        </div>\n      </div><! --/row -->\n     </div><! --/container -->\n{% endblock content %}   article_detail.html   {% extends \"aldryn_newsblog/base.html\" %}\n{% load i18n cms_tags apphooks_config_tags %}\n\n{% block title %}\n    {{ article.title }} - {{ block.super }}\n{% endblock %}\n\n{% block newsblog_content %}\n    {% include \"aldryn_newsblog/includes/article.html\" with detail_view=\"true\" %}\n    {% static_placeholder \"newsblog_social\" %}\n{% endblock %}   includes/article.html   {% load i18n staticfiles thumbnail cms_tags apphooks_config_tags %}\n\n{% if article.featured_image_id %}\n  <img class=\"img-responsive\" src=\"{% thumbnail article.featured_image 800x450 crop subject_location=article.featured_image.subject_location %}\" alt=\"{{ article.featured_image.alt }}\">\n{% endif %}\n\n{% if detail_view %}\n    <h3 class=\"ctitle\">{% render_model article \"title\" %}</h3>\n{% else %}\n    <a href=\"{% namespace_url 'article-detail' article.slug namespace=namespace default='' %}\"><h3 class=\"ctitle\">{% render_model article \"title\" %}</h3></a>\n{% endif %}\n\n<p><csmall>Posted: {{ article.publishing_date|date }}</csmall> | <csmall2>By: {% include \"aldryn_newsblog/includes/author.html\" with author=article.author %}</csmall2></p>\n{% render_model article \"lead_in\" %}\n\n{% if detail_view %}\n    {% render_placeholder article.content language placeholder_language %}\n{% else %}\n  <p><a href=\"{% namespace_url 'article-detail' article.slug namespace=namespace default='' %}\">[Read More]</a></p>\n  <div class=\"hline\"></div>\n  <div class=\"spacing\"></div>\n{% endif %}   includes/author.html   {% load i18n staticfiles thumbnail apphooks_config_tags %}\n\n{% if author %}\n        <a href=\"{% namespace_url \"article-list-by-author\" author.slug namespace=namespace default='' %}\">\n            {% if author.visual %}\n                {% thumbnail author.visual \"50x50\" crop upscale subject_location=author.visual.subject_location as author_image %}\n                <img src=\"{{ author_image.url }}\" width=\"50\" height=\"50\" alt=\"{{ author.name }}\">\n            {% endif %}\n            {{ author.name }}\n        </a>\n    {% if author.function %}<p>{{ author.function }}</p>{% endif %}\n    {% if author.article_count %}<p>{{ author.article_count }}</p>{% endif %}\n{% endif %}   plugins/tags.html   {% load i18n apphooks_config_tags %}\n\n<h4>Popular Tags</h4>\n<div class=\"hline\"></div>\n<p>\n  {% for tag in tags %}\n    <a class=\"btn btn-theme\" href=\"{% namespace_url \"article-list-by-tag\" tag.slug namespace=instance.app_config.namespace default='' %}\" role=\"button\">{{ tag.name }}</a>\n  {% endfor %}\n</p>   plugins/latest_articles.html   {% load i18n staticfiles thumbnail cms_tags apphooks_config_tags %}\n\n\n<h4>Recent Posts</h4>\n<div class=\"hline\"></div>\n  <ul class=\"popular-posts\">\n\n{% for article in article_list %}\n    <li>\n      {% if article.featured_image_id %}\n        <a href=\"{% namespace_url 'article-detail' article.slug namespace=namespace default='' %}\">\n          <img class=\"img-responsive\" src=\"{% thumbnail article.featured_image 70x70 crop subject_location=article.featured_image.subject_location %}\"\n          alt=\"{{ article.featured_image.alt }}\">\n        </a>\n      {% endif %}\n        <h4><a href=\"{% namespace_url 'article-detail' article.slug namespace=namespace default='' %}\">{{ article.title }}</a></h4>\n        <em>Posted: {{ article.publishing_date|date }}</em>\n    </li>\n{% empty %}\n    <p>{% trans \"No items available\" %}</p>\n{% endfor %}\n\n<div class=\"spacing\"></div>   plugins/categories.html   {% load i18n apphooks_config_tags %}\n\n\n<h4>Categories</h4>\n<div class=\"hline\"></div>\n{% for category in categories %}\n    <p {% if newsblog_category.id == category.id %} class=\"active\"{% endif %}>\n      <a href=\"{% namespace_url \"article-list-by-category\" category.slug namespace=instance.app_config.namespace default='' %}\">\n        <i class=\"fa fa-angle-right\"></i>\n        {{ category.name }}\n      </a>\n      <span class=\"badge badge-theme pull-right\">{{ category.article_count }}</span>\n    </p>\n{% endfor %}\n<div class=\"spacing\"></div>",
            "title": "Integraci\u00f3n de third-party application"
        },
        {
            "location": "/avanzado/paginas_tipo/",
            "text": "P\u00e1ginas tipo\n\n\nLas p\u00e1gina tipo facilitan a los editores de contenido la creaci\u00f3n de p\u00e1ginas a partir de otras p\u00e1ginas ya definidas.\n\n\nLas \"p\u00e1ginas tipo\" tienen contenido como plugins que se copiar\u00e1n a la p\u00e1gina reci\u00e9n creada.\n\n\n\n\n\n\nPrimero crearemos una nueva p\u00e1gina de la forma habitual; esto se convertir\u00e1 en la plantilla para tu nueva p\u00e1gina tipo.\n\n\n\n\n\n\nUtilizaremos esta p\u00e1gina como nuestra plantilla para agregar contenido de ejemplo y plugins hasta dejarla como queramos.\n\n\n\n\n\n\nCuando lo tengamos como queremos, seleccionaremos \nGuardar como tipo de p\u00e1gina...\n en el \nmen\u00fa P\u00e1gina\n y le daremos un nombre que nos permita distinguirla en el futuro.\n\n\n\n\n\n\n\n\n\n\nPodemos seguir cambiando su contenido y configuraci\u00f3n en el futuro.\n\n\n\n\n\n\n\n\nYa tendremos una nueva p\u00e1gina tipo que tendremos disponible desde \nAgregar p\u00e1gina\n y el cuadro de di\u00e1logo \nCrear\n.",
            "title": "P\u00e1ginas tipo"
        },
        {
            "location": "/avanzado/paginas_tipo/#paginas-tipo",
            "text": "Las p\u00e1gina tipo facilitan a los editores de contenido la creaci\u00f3n de p\u00e1ginas a partir de otras p\u00e1ginas ya definidas.  Las \"p\u00e1ginas tipo\" tienen contenido como plugins que se copiar\u00e1n a la p\u00e1gina reci\u00e9n creada.    Primero crearemos una nueva p\u00e1gina de la forma habitual; esto se convertir\u00e1 en la plantilla para tu nueva p\u00e1gina tipo.    Utilizaremos esta p\u00e1gina como nuestra plantilla para agregar contenido de ejemplo y plugins hasta dejarla como queramos.    Cuando lo tengamos como queremos, seleccionaremos  Guardar como tipo de p\u00e1gina...  en el  men\u00fa P\u00e1gina  y le daremos un nombre que nos permita distinguirla en el futuro.      Podemos seguir cambiando su contenido y configuraci\u00f3n en el futuro.     Ya tendremos una nueva p\u00e1gina tipo que tendremos disponible desde  Agregar p\u00e1gina  y el cuadro de di\u00e1logo  Crear .",
            "title": "P\u00e1ginas tipo"
        },
        {
            "location": "/avanzado/extender_pagina/",
            "text": "Extender el modelo de P\u00e1gina\n\n\nPodemos ampliar los modelos \ncms.models.Page\n y \ncms.models.Title\n  con sus propios campos (por ejemplo a\u00f1adiendo un icono para cada p\u00e1gina) usando los modelos de extensi\u00f3n: \ncms.extensions.PageExtension\n y \ncms.extensions.TitleExtension\n respectivamente.\n\n\nTitle vs Page extensions\n\n\nLa diferencia entre una extensi\u00f3n de p\u00e1gina y una extensi\u00f3n de t\u00edtulo est\u00e1 relacionada con la diferencia entre los modelos \ncms.models.Page\n y \ncms.models.Title models\n.\n\n\nPage\n\n\nA\u00f1adir campos que deber\u00edan tener los mismos valores para las diferentes versiones ling\u00fc\u00edsticas de una p\u00e1gina (por ejemplo, un icono).\n\n\nTitle\n\n\nA\u00f1adir campos que deben tener valores espec\u00edficos de idioma para las diferentes versiones ling\u00fc\u00edsticas de una p\u00e1gina (por ejemplo, palabras clave).\n\n\nImplementar una extensi\u00f3n b\u00e1sica\n\n\nTres pasos b\u00e1sicos:\n\n\n\n\nA\u00f1adir el modelo de extensi\u00f3n\n\n\nA\u00f1adir la extensi\u00f3n admin\n\n\nA\u00f1adir un elemento de men\u00fa de la barra de herramientas para la extensi\u00f3n\n\n\n\n\nExtensi\u00f3n del modelo P\u00e1gina\n\n\nEjemplo sencillo que a\u00f1ade un campo de icono a la p\u00e1gina\n\n\nfrom django.db import models\nfrom cms.extensions import PageExtension\nfrom cms.extensions.extension_pool import extension_pool\n\n\nclass IconExtension(PageExtension):\n    image = models.ImageField(upload_to='icons')\n\n\nextension_pool.register(IconExtension)\n\n\n\n\nEl siguiente paso es crear y aplicar las migraci\u00f3n para este nuevo modelo que hemos creado.\n\n\npython manage.py makemigrations\n\n\npython manage.py migrate\n\n\nPara la extensi\u00f3n sea editable, primero debe crear una clase de admin que herede de \ncms.extensions.PageExtensionAdmin\n dentro del fichero \nadmin.py\n de nuestra app my_web_cms\n\n\nfrom django.contrib import admin\nfrom cms.extensions import PageExtensionAdmin\n\nfrom .models import IconExtension\n\n\nclass IconExtensionAdmin(PageExtensionAdmin):\n    pass\n\nadmin.site.register(IconExtension, IconExtensionAdmin)\n\n\n\n\nPageExtensionAdmin\n hereda de \nModelAdmin\n, por lo que podremos utilizar el conjunto normal de propiedades de ModelAdmin de Django.\n\n\nHay que tener en cuenta que el campo que contiene la relaci\u00f3n entre la extensi\u00f3n y la p\u00e1gina CMS no es editable, por lo que no aparece directamente en las vistas de administrador de p\u00e1gina. En la documentaci\u00f3n oficial esto puede ser tratado en una actualizaci\u00f3n futura, pero mientras tanto la barra de herramientas proporciona acceso a ella.\n\n\nPara a\u00f1adir a la barra de herramientas el elemento para nuestra extensi\u00f3n, crearemos un archivo llamado \ncms_toolbars.py\n en nuestra app my_web_cms y a\u00f1adiremos un nodo al men\u00fa de P\u00e1gina existente, llamado Icono de P\u00e1gina. Cuando se selecciona, se abrir\u00e1 un di\u00e1logo modal en el que se podr\u00e1 editar el campo Icono de p\u00e1gina.\n\n\nA\u00f1adimos una imagen a nuestra p\u00e1gina HOME:\n\n\n\n\n\n\nDEMO\n\n\nVamos a usar nuestra extensi\u00f3n de p\u00e1gina.\n\n\nA\u00f1adimos en nuestro \nbase.html\n (justo debajo de \n{% include \"inc/menu.html\" %}\n) el siguiente trozo de c\u00f3digo\n\n\n  {% if request.current_page.iconextension %}\n    <img style=\"margin: 50px 0\"src=\"{% static request.current_page.iconextension.image.url %}\">\n  {% endif %}\n\n\n\n\nPodemos observar que nuestra home muestar la imagen que hemos a\u00f1adido, sin embargo si entramos la p\u00e1gina \"sobre nosotros\" no se muestra imagen alguna. Podemos a\u00f1adir una imagen distinta a esta p\u00e1gina y volver a comprobar.\n\n\nExtensi\u00f3n del modelo Title\n\n\ndocumentaci\u00f3n oficial\n.\n\n\nPara recuperar una extensi\u00f3n de title dentro de una plantilla, tenemos que coger el objeto title utilizando \nrequest.current_page.get_title_obj\n. Podemos usar el ejemplo anterior:\n\n\n{{ request.current_page.get_title_obj.ratingextension.rating }}\n\n\nManejo de las relaciones\n\n\n\n\nSi PageExtension o TitleExtension tiene una ForeignKey o un ManyToManyField, hay que sobreescribir el m\u00e9todo \ncopy_relations(self, oldinstance, language)\n para que estos campos se copien apropiadamente cuando el CMS haga una copia de su extensi\u00f3n para soportar versionado (borrador y publicado), etc.\n\n\n\n\nEjemplo que usa un ManyToManyField:\n\n\nfrom django.db import models\nfrom cms.extensions import PageExtension\nfrom cms.extensions.extension_pool import extension_pool\n\n\nclass MyPageExtension(PageExtension):\n\n    page_categories = models.ManyToManyField(Category, blank=True)\n\n    def copy_relations(self, oldinstance, language):\n        for page_category in oldinstance.page_categories.all():\n            page_category.pk = None\n            page_category.mypageextension = self\n            page_category.save()\n\nextension_pool.register(MyPageExtension)",
            "title": "Extender el Modelo de P\u00e1gina"
        },
        {
            "location": "/avanzado/extender_pagina/#extender-el-modelo-de-pagina",
            "text": "Podemos ampliar los modelos  cms.models.Page  y  cms.models.Title   con sus propios campos (por ejemplo a\u00f1adiendo un icono para cada p\u00e1gina) usando los modelos de extensi\u00f3n:  cms.extensions.PageExtension  y  cms.extensions.TitleExtension  respectivamente.",
            "title": "Extender el modelo de P\u00e1gina"
        },
        {
            "location": "/avanzado/extender_pagina/#title-vs-page-extensions",
            "text": "La diferencia entre una extensi\u00f3n de p\u00e1gina y una extensi\u00f3n de t\u00edtulo est\u00e1 relacionada con la diferencia entre los modelos  cms.models.Page  y  cms.models.Title models .",
            "title": "Title vs Page extensions"
        },
        {
            "location": "/avanzado/extender_pagina/#page",
            "text": "A\u00f1adir campos que deber\u00edan tener los mismos valores para las diferentes versiones ling\u00fc\u00edsticas de una p\u00e1gina (por ejemplo, un icono).",
            "title": "Page"
        },
        {
            "location": "/avanzado/extender_pagina/#title",
            "text": "A\u00f1adir campos que deben tener valores espec\u00edficos de idioma para las diferentes versiones ling\u00fc\u00edsticas de una p\u00e1gina (por ejemplo, palabras clave).",
            "title": "Title"
        },
        {
            "location": "/avanzado/extender_pagina/#implementar-una-extension-basica",
            "text": "Tres pasos b\u00e1sicos:   A\u00f1adir el modelo de extensi\u00f3n  A\u00f1adir la extensi\u00f3n admin  A\u00f1adir un elemento de men\u00fa de la barra de herramientas para la extensi\u00f3n",
            "title": "Implementar una extensi\u00f3n b\u00e1sica"
        },
        {
            "location": "/avanzado/extender_pagina/#extension-del-modelo-pagina",
            "text": "Ejemplo sencillo que a\u00f1ade un campo de icono a la p\u00e1gina  from django.db import models\nfrom cms.extensions import PageExtension\nfrom cms.extensions.extension_pool import extension_pool\n\n\nclass IconExtension(PageExtension):\n    image = models.ImageField(upload_to='icons')\n\n\nextension_pool.register(IconExtension)  El siguiente paso es crear y aplicar las migraci\u00f3n para este nuevo modelo que hemos creado.  python manage.py makemigrations  python manage.py migrate  Para la extensi\u00f3n sea editable, primero debe crear una clase de admin que herede de  cms.extensions.PageExtensionAdmin  dentro del fichero  admin.py  de nuestra app my_web_cms  from django.contrib import admin\nfrom cms.extensions import PageExtensionAdmin\n\nfrom .models import IconExtension\n\n\nclass IconExtensionAdmin(PageExtensionAdmin):\n    pass\n\nadmin.site.register(IconExtension, IconExtensionAdmin)  PageExtensionAdmin  hereda de  ModelAdmin , por lo que podremos utilizar el conjunto normal de propiedades de ModelAdmin de Django.  Hay que tener en cuenta que el campo que contiene la relaci\u00f3n entre la extensi\u00f3n y la p\u00e1gina CMS no es editable, por lo que no aparece directamente en las vistas de administrador de p\u00e1gina. En la documentaci\u00f3n oficial esto puede ser tratado en una actualizaci\u00f3n futura, pero mientras tanto la barra de herramientas proporciona acceso a ella.  Para a\u00f1adir a la barra de herramientas el elemento para nuestra extensi\u00f3n, crearemos un archivo llamado  cms_toolbars.py  en nuestra app my_web_cms y a\u00f1adiremos un nodo al men\u00fa de P\u00e1gina existente, llamado Icono de P\u00e1gina. Cuando se selecciona, se abrir\u00e1 un di\u00e1logo modal en el que se podr\u00e1 editar el campo Icono de p\u00e1gina.  A\u00f1adimos una imagen a nuestra p\u00e1gina HOME:",
            "title": "Extensi\u00f3n del modelo P\u00e1gina"
        },
        {
            "location": "/avanzado/extender_pagina/#demo",
            "text": "Vamos a usar nuestra extensi\u00f3n de p\u00e1gina.  A\u00f1adimos en nuestro  base.html  (justo debajo de  {% include \"inc/menu.html\" %} ) el siguiente trozo de c\u00f3digo    {% if request.current_page.iconextension %}\n    <img style=\"margin: 50px 0\"src=\"{% static request.current_page.iconextension.image.url %}\">\n  {% endif %}  Podemos observar que nuestra home muestar la imagen que hemos a\u00f1adido, sin embargo si entramos la p\u00e1gina \"sobre nosotros\" no se muestra imagen alguna. Podemos a\u00f1adir una imagen distinta a esta p\u00e1gina y volver a comprobar.",
            "title": "DEMO"
        },
        {
            "location": "/avanzado/extender_pagina/#extension-del-modelo-title",
            "text": "documentaci\u00f3n oficial .  Para recuperar una extensi\u00f3n de title dentro de una plantilla, tenemos que coger el objeto title utilizando  request.current_page.get_title_obj . Podemos usar el ejemplo anterior:  {{ request.current_page.get_title_obj.ratingextension.rating }}",
            "title": "Extensi\u00f3n del modelo Title"
        },
        {
            "location": "/avanzado/extender_pagina/#manejo-de-las-relaciones",
            "text": "Si PageExtension o TitleExtension tiene una ForeignKey o un ManyToManyField, hay que sobreescribir el m\u00e9todo  copy_relations(self, oldinstance, language)  para que estos campos se copien apropiadamente cuando el CMS haga una copia de su extensi\u00f3n para soportar versionado (borrador y publicado), etc.   Ejemplo que usa un ManyToManyField:  from django.db import models\nfrom cms.extensions import PageExtension\nfrom cms.extensions.extension_pool import extension_pool\n\n\nclass MyPageExtension(PageExtension):\n\n    page_categories = models.ManyToManyField(Category, blank=True)\n\n    def copy_relations(self, oldinstance, language):\n        for page_category in oldinstance.page_categories.all():\n            page_category.pk = None\n            page_category.mypageextension = self\n            page_category.save()\n\nextension_pool.register(MyPageExtension)",
            "title": "Manejo de las relaciones"
        },
        {
            "location": "/avanzado/extender_toolbar/",
            "text": "Extender el Toolbar\n\n\nDjango CMS permite agregar y quitar elementos de la barra de herramientas (toolbar).\n\n\nEsto le permite integrar el modo de edici\u00f3n de frontend de django CMS en su aplicaci\u00f3n django y proporcionar a sus usuarios una experiencia de edici\u00f3n optimizada.\n\n\nPara ejemplificar esta caracter\u00edstica de django CMS vamos a integrar en el toolbar dos nuevos elementos, una aplicaci\u00f3n de terceros ya preparada para integrarla desde el settings.py y otra que no:\n\n\nNuestro toolbar tiene el siguiente aspecto actualmente:\n\n\n\n\nExtender toolbar desde settings.py\n\n\nDjango filer \n es una aplicaci\u00f3n de gesti\u00f3n de archivos e im\u00e1genes para django que ya viene preparada para integrar un punto de entrada en el toolbar con s\u00f3lo a\u00f1adir un settings.\n\n\n\n\nAbrimos \nsettings.py\n y en \nINSTALLED_APPS\n a\u00f1adimos justo debajo de 'filer' la siguiente linea:\n\n\n\n\n'filer.contrib.django_cms',\n\n\nAhora nuestro toolbar tendr\u00e1 un nuevo punto de men\u00fa el siguiente aspecto actualmente:\n\n\n\n\nExtender toolbar en una aplicaci\u00f3n no preparada\n\n\nVamos a integrar en el toolbar la aplicaci\u00f3n \nDjango Taggit \n. Django taggit es como su nombre indica una aplicaci\u00f3n de django para gestionar las etiquetas. Un inconveniente que trae es que no trae consigo la integraci\u00f3n con django CMS por lo que para incluirla en el toolbar del mismo tendremos que currar un poco m\u00e1s :)\n\n\nPara ello tenemos que a\u00f1adir el siguiente c\u00f3digo al fichero \ncms_toolbars.py\n que creamos antes para a\u00f1adir al toolbar nuestra extensi\u00f3n de p\u00e1gina:\n\n\nfrom cms.toolbar_base import CMSToolbar\nfrom django.core.urlresolvers import reverse\nfrom cms.toolbar.items import Break, SubMenu\nfrom cms.cms_toolbars import ADMIN_MENU_IDENTIFIER, ADMINISTRATION_BREAK\n\n@toolbar_pool.register\nclass TaggitToolbar(CMSToolbar):\n\n    def populate(self):\n        #\n        # 'Apps' is the spot on the existing djang-cms toolbar admin_menu\n        # 'where we'll insert all of our applications' menus.\n        #\n        admin_menu = self.toolbar.get_or_create_menu(\n            ADMIN_MENU_IDENTIFIER, _('PyConES')\n        )\n\n        #\n        # Let's check to see where we would insert an 'Offices' menu in the\n        # admin_menu.\n        #\n        position = admin_menu.get_alphabetical_insert_position(\n            _('Tags'),\n            SubMenu\n        )\n\n        #\n        # If zero was returned, then we know we're the first of our\n        # applications' menus to be inserted into the admin_menu, so, here\n        # we'll compute that we need to go after the first\n        # ADMINISTRATION_BREAK and, we'll insert our own break after our\n        # section.\n        #\n        if not position:\n            # OK, use the ADMINISTRATION_BREAK location + 1\n            position = admin_menu.find_first(\n                Break,\n                identifier=ADMINISTRATION_BREAK\n            ) + 1\n            # Insert our own menu-break, at this new position. We'll insert\n            # all subsequent menus before this, so it will ultimately come\n            # after all of our applications' menus.\n            admin_menu.add_break('custom-break', position=position)\n\n        # OK, create our taggit menu here.\n        taggit_menu = admin_menu.get_or_create_menu(\n            'taggit-menu',\n            _('Tags ...'),\n            position=position\n        )\n\n        # Let's add some sub-menus to our tag menu that help our users\n\n        # Take the user to the admin-listing for tags...\n        url = reverse('admin:taggit_tag_changelist')\n        taggit_menu.add_sideframe_item(_('Tag List'), url=url)\n\n        # Display a modal dialogue for creating a new tag...\n        url = reverse('admin:taggit_tag_add')\n        taggit_menu.add_modal_item(_('Add New Tag'), url=url)\n\n        # Add a break in the sub-menus\n        taggit_menu.add_break()\n\n\n\n\n\nAhora nuestro toolbar tendr\u00e1 un nuevo punto de men\u00fa el siguiente aspecto actualmente:",
            "title": "Extender el Toolbar"
        },
        {
            "location": "/avanzado/extender_toolbar/#extender-el-toolbar",
            "text": "Django CMS permite agregar y quitar elementos de la barra de herramientas (toolbar).  Esto le permite integrar el modo de edici\u00f3n de frontend de django CMS en su aplicaci\u00f3n django y proporcionar a sus usuarios una experiencia de edici\u00f3n optimizada.  Para ejemplificar esta caracter\u00edstica de django CMS vamos a integrar en el toolbar dos nuevos elementos, una aplicaci\u00f3n de terceros ya preparada para integrarla desde el settings.py y otra que no:  Nuestro toolbar tiene el siguiente aspecto actualmente:",
            "title": "Extender el Toolbar"
        },
        {
            "location": "/avanzado/extender_toolbar/#extender-toolbar-desde-settingspy",
            "text": "Django filer   es una aplicaci\u00f3n de gesti\u00f3n de archivos e im\u00e1genes para django que ya viene preparada para integrar un punto de entrada en el toolbar con s\u00f3lo a\u00f1adir un settings.   Abrimos  settings.py  y en  INSTALLED_APPS  a\u00f1adimos justo debajo de 'filer' la siguiente linea:   'filer.contrib.django_cms',  Ahora nuestro toolbar tendr\u00e1 un nuevo punto de men\u00fa el siguiente aspecto actualmente:",
            "title": "Extender toolbar desde settings.py"
        },
        {
            "location": "/avanzado/extender_toolbar/#extender-toolbar-en-una-aplicacion-no-preparada",
            "text": "Vamos a integrar en el toolbar la aplicaci\u00f3n  Django Taggit  . Django taggit es como su nombre indica una aplicaci\u00f3n de django para gestionar las etiquetas. Un inconveniente que trae es que no trae consigo la integraci\u00f3n con django CMS por lo que para incluirla en el toolbar del mismo tendremos que currar un poco m\u00e1s :)  Para ello tenemos que a\u00f1adir el siguiente c\u00f3digo al fichero  cms_toolbars.py  que creamos antes para a\u00f1adir al toolbar nuestra extensi\u00f3n de p\u00e1gina:  from cms.toolbar_base import CMSToolbar\nfrom django.core.urlresolvers import reverse\nfrom cms.toolbar.items import Break, SubMenu\nfrom cms.cms_toolbars import ADMIN_MENU_IDENTIFIER, ADMINISTRATION_BREAK\n\n@toolbar_pool.register\nclass TaggitToolbar(CMSToolbar):\n\n    def populate(self):\n        #\n        # 'Apps' is the spot on the existing djang-cms toolbar admin_menu\n        # 'where we'll insert all of our applications' menus.\n        #\n        admin_menu = self.toolbar.get_or_create_menu(\n            ADMIN_MENU_IDENTIFIER, _('PyConES')\n        )\n\n        #\n        # Let's check to see where we would insert an 'Offices' menu in the\n        # admin_menu.\n        #\n        position = admin_menu.get_alphabetical_insert_position(\n            _('Tags'),\n            SubMenu\n        )\n\n        #\n        # If zero was returned, then we know we're the first of our\n        # applications' menus to be inserted into the admin_menu, so, here\n        # we'll compute that we need to go after the first\n        # ADMINISTRATION_BREAK and, we'll insert our own break after our\n        # section.\n        #\n        if not position:\n            # OK, use the ADMINISTRATION_BREAK location + 1\n            position = admin_menu.find_first(\n                Break,\n                identifier=ADMINISTRATION_BREAK\n            ) + 1\n            # Insert our own menu-break, at this new position. We'll insert\n            # all subsequent menus before this, so it will ultimately come\n            # after all of our applications' menus.\n            admin_menu.add_break('custom-break', position=position)\n\n        # OK, create our taggit menu here.\n        taggit_menu = admin_menu.get_or_create_menu(\n            'taggit-menu',\n            _('Tags ...'),\n            position=position\n        )\n\n        # Let's add some sub-menus to our tag menu that help our users\n\n        # Take the user to the admin-listing for tags...\n        url = reverse('admin:taggit_tag_changelist')\n        taggit_menu.add_sideframe_item(_('Tag List'), url=url)\n\n        # Display a modal dialogue for creating a new tag...\n        url = reverse('admin:taggit_tag_add')\n        taggit_menu.add_modal_item(_('Add New Tag'), url=url)\n\n        # Add a break in the sub-menus\n        taggit_menu.add_break()  Ahora nuestro toolbar tendr\u00e1 un nuevo punto de men\u00fa el siguiente aspecto actualmente:",
            "title": "Extender toolbar en una aplicaci\u00f3n no preparada"
        },
        {
            "location": "/avanzado/extender_menu/",
            "text": "Extender el men\u00fa de navegaci\u00f3n\n\n\nHay tres maneras diferentes de personalizar los men\u00fas de navegaci\u00f3n de en django CMS.\n\n\nMen\u00fas:\n\n\nAmpliar de manera est\u00e1tica las entradas de men\u00fa. \u00c9ste es el que vamos a llevar a cabo en nuestra p\u00e1gina web de ejemplo. Vamos a a\u00f1adir un nuevo punto a una web externa en nuestro men\u00fa.\n\n\n\n\nPrimero creamos un fichero \nmenu.py\n en nuestra app \nmy_web_cms\n que contendr\u00e1 lo siguiente:\n\n\n\n\nfrom menus.base import Menu, NavigationNode\nfrom menus.menu_pool import menu_pool\nfrom django.utils.translation import ugettext_lazy as _\n\n\nclass ExtendMenu(Menu):\n\n    def get_nodes(self, request):\n        nodes = []\n        n = NavigationNode(_('PyConES 2017'), \"https://2017.es.pycon.org\", 1)\n        nodes.append(n)\n        return nodes\n\n\nmenu_pool.register_menu(ExtendMenu)\n\n\n\n\n\n\nSi actualizamos la p\u00e1gina, ahora deber\u00edamos ver la nueva entradas del men\u00fa.\n\n\n\n\nLa funci\u00f3n \nget_nodes\n devuelve una lista de instancias de \nNavigationNode\n. \nmenus.base.NavigationNode\n tiene siguientes argumentos:\n\n\n\n\n\n\ntitle\n: Texto para el nodo de men\u00fa\n\n\n\n\n\n\nurl\n : URL para el nodo de men\u00fa\n\n\n\n\n\n\nid\n: ID \u00fanico apra el nodo de men\u00fa\n\n\n\n\n\n\nparent_id=None\n: Si \u00e9ste es un hijo de otro nodo, hay que pasarle aqu\u00ed el identificador del padre.\n\n\n\n\n\n\nparent_namespace=None\n: Si el nodo padre no est\u00e1 en este men\u00fa, puede darle el namespace padre. El espacio de nombres es el nombre de la clase. En el ejemplo anterior, que ser\u00eda: ExtendMenu\n\n\n\n\n\n\nattr=None\n: Un diccionario de atributos adicionales que puede utilizar en un modificador o en la plantilla\n\n\n\n\n\n\nvisible=True\n: Si este punto de men\u00fa debe ser visible o no\n\n\n\n\n\n\nAdjuntar men\u00fas:\n\n\nAdjuntar su men\u00fa a una p\u00e1gina.\n\n\nSirve para adaptar un men\u00fa seg\u00fan las condiciones de la solicitud (por ejemplo, usuarios an\u00f3nimos/registrados), puede utilizar los Modificadores de Navegaci\u00f3n o puede hacer uso de los ya existentes.\n\n\nPor ejemplo, es posible a\u00f1adir {'visible_for_anonymous': False}/{'visible_for_authenticated': False} atributos reconocidos por el modificador AuthVisibility de django CMS core.\n\n\ndocumentaci\u00f3n oficial\n.\n\n\nModificadores de Navegaci\u00f3n:\n\n\nModificar todo el \u00e1rbol de men\u00fa\n\n\ndocumentaci\u00f3n oficial\n.",
            "title": "Extender el men\u00fa"
        },
        {
            "location": "/avanzado/extender_menu/#extender-el-menu-de-navegacion",
            "text": "Hay tres maneras diferentes de personalizar los men\u00fas de navegaci\u00f3n de en django CMS.",
            "title": "Extender el men\u00fa de navegaci\u00f3n"
        },
        {
            "location": "/avanzado/extender_menu/#menus",
            "text": "Ampliar de manera est\u00e1tica las entradas de men\u00fa. \u00c9ste es el que vamos a llevar a cabo en nuestra p\u00e1gina web de ejemplo. Vamos a a\u00f1adir un nuevo punto a una web externa en nuestro men\u00fa.   Primero creamos un fichero  menu.py  en nuestra app  my_web_cms  que contendr\u00e1 lo siguiente:   from menus.base import Menu, NavigationNode\nfrom menus.menu_pool import menu_pool\nfrom django.utils.translation import ugettext_lazy as _\n\n\nclass ExtendMenu(Menu):\n\n    def get_nodes(self, request):\n        nodes = []\n        n = NavigationNode(_('PyConES 2017'), \"https://2017.es.pycon.org\", 1)\n        nodes.append(n)\n        return nodes\n\n\nmenu_pool.register_menu(ExtendMenu)   Si actualizamos la p\u00e1gina, ahora deber\u00edamos ver la nueva entradas del men\u00fa.   La funci\u00f3n  get_nodes  devuelve una lista de instancias de  NavigationNode .  menus.base.NavigationNode  tiene siguientes argumentos:    title : Texto para el nodo de men\u00fa    url  : URL para el nodo de men\u00fa    id : ID \u00fanico apra el nodo de men\u00fa    parent_id=None : Si \u00e9ste es un hijo de otro nodo, hay que pasarle aqu\u00ed el identificador del padre.    parent_namespace=None : Si el nodo padre no est\u00e1 en este men\u00fa, puede darle el namespace padre. El espacio de nombres es el nombre de la clase. En el ejemplo anterior, que ser\u00eda: ExtendMenu    attr=None : Un diccionario de atributos adicionales que puede utilizar en un modificador o en la plantilla    visible=True : Si este punto de men\u00fa debe ser visible o no",
            "title": "Men\u00fas:"
        },
        {
            "location": "/avanzado/extender_menu/#adjuntar-menus",
            "text": "Adjuntar su men\u00fa a una p\u00e1gina.  Sirve para adaptar un men\u00fa seg\u00fan las condiciones de la solicitud (por ejemplo, usuarios an\u00f3nimos/registrados), puede utilizar los Modificadores de Navegaci\u00f3n o puede hacer uso de los ya existentes.  Por ejemplo, es posible a\u00f1adir {'visible_for_anonymous': False}/{'visible_for_authenticated': False} atributos reconocidos por el modificador AuthVisibility de django CMS core.  documentaci\u00f3n oficial .",
            "title": "Adjuntar men\u00fas:"
        },
        {
            "location": "/avanzado/extender_menu/#modificadores-de-navegacion",
            "text": "Modificar todo el \u00e1rbol de men\u00fa  documentaci\u00f3n oficial .",
            "title": "Modificadores de Navegaci\u00f3n:"
        },
        {
            "location": "/avanzado/cache/",
            "text": "Cach\u00e9 en django CMS\n\n\nPara configurar la cach\u00e9 en django CMS primero tendremos que configurar un backend de cach\u00e9 para django.\n\n\nM\u00e1s detalles sobre cach\u00e9 en django \naqu\u00ed\n:\n\n\nConfiguraci\u00f3n del middleware:\n\n\n\n\n\n\ndjango.middleware.cache.UpdateCacheMiddleware\n en primer lugar\n\n\n\n\n\n\ndjango.middleware.cache.FetchFromCacheMiddleware\n en la \u00faltima posici\u00f3n\n\n\n\n\n\n\nquedando una cosa as\u00ed:\n\n\nMIDDLEWARE_CLASSES=[\n    'django.middleware.cache.UpdateCacheMiddleware',\n    ...\n    'cms.middleware.language.LanguageCookieMiddleware',\n    'cms.middleware.user.CurrentUserMiddleware',\n    'cms.middleware.page.CurrentPageMiddleware',\n    'cms.middleware.toolbar.ToolbarMiddleware',\n    'django.middleware.cache.FetchFromCacheMiddleware',\n],\n\n\n\n\nPlugins\n\n\nNormalmente, todos los plugins ser\u00e1n almacenados en cach\u00e9. Si tiene un plugin din\u00e1mico basado en el usuario actual u otras propiedades din\u00e1micas de la petici\u00f3n, establezca el atributo \ncache=False\n en la clase plugin:\n\n\nclass MyPlugin(CMSPluginBase):\n    name = _(\"MyPlugin\")\n    cache = False\n\n\n\n\n\n\nNota:\n Si deshabilita una cach\u00e9 de plugin aseg\u00farese de reiniciar el servidor y luego desactive la cach\u00e9.\n\n\n\n\nDuraci\u00f3n de la cach\u00e9\n\n\nPor defecto es 60 segundos pero puede ser cambiado estableciendo el valor que queramos en la settings \nCMS_CACHE_DURATIONS\n\n\nSettings\n\n\nEl almacenamiento en cach\u00e9 se establece por defecto como true. Existen varias settings para habilitar/deshabilitar varios comportamientos de cach\u00e9:\n\n\nCMS_CACHE_DURATIONS\n\n\nEste diccionario contiene las distintas configuraciones de duraci\u00f3n de cach\u00e9.\n\n\n'content'\n: 60 segundos por defecto para \nshow_placeholder\n, \npage_url\n, \nplaceholder\n and \nstatic_placeholder\n template tags.\n\n\n'menus'\n: 3600 segundos por defecto.\n\n\nCMS_CACHE_PREFIX\n\n\ncms-\n por defecto.\n\n\nEl CMS pondr\u00e1 el valor asociado a esta clave para cada acceso a la cach\u00e9 (set y get). Esto es \u00fatil cuando tiene varias instalaciones de django CMS, y no quiere que compartan objetos de cach\u00e9.\n\n\nCMS_CACHE_PREFIX = 'mysite-live'\n\n\nCMS_PAGE_CACHE\n\n\nTrue\n por defecto\n\n\nLas p\u00e1ginas no son almacenadas en cach\u00e9 para los usuarios logados. Si el toolbar es visible, la p\u00e1gina no est\u00e1 cacheada.\n\n\nCMS_PLACEHOLDER_CACHE\n\n\nTrue\n por defecto\n\n\nCMS_PLUGIN_CACHE\n\n\nTrue\n por defecto",
            "title": "Cach\u00e9 en django CMS"
        },
        {
            "location": "/avanzado/cache/#cache-en-django-cms",
            "text": "Para configurar la cach\u00e9 en django CMS primero tendremos que configurar un backend de cach\u00e9 para django.  M\u00e1s detalles sobre cach\u00e9 en django  aqu\u00ed :",
            "title": "Cach\u00e9 en django CMS"
        },
        {
            "location": "/avanzado/cache/#configuracion-del-middleware",
            "text": "django.middleware.cache.UpdateCacheMiddleware  en primer lugar    django.middleware.cache.FetchFromCacheMiddleware  en la \u00faltima posici\u00f3n    quedando una cosa as\u00ed:  MIDDLEWARE_CLASSES=[\n    'django.middleware.cache.UpdateCacheMiddleware',\n    ...\n    'cms.middleware.language.LanguageCookieMiddleware',\n    'cms.middleware.user.CurrentUserMiddleware',\n    'cms.middleware.page.CurrentPageMiddleware',\n    'cms.middleware.toolbar.ToolbarMiddleware',\n    'django.middleware.cache.FetchFromCacheMiddleware',\n],",
            "title": "Configuraci\u00f3n del middleware:"
        },
        {
            "location": "/avanzado/cache/#plugins",
            "text": "Normalmente, todos los plugins ser\u00e1n almacenados en cach\u00e9. Si tiene un plugin din\u00e1mico basado en el usuario actual u otras propiedades din\u00e1micas de la petici\u00f3n, establezca el atributo  cache=False  en la clase plugin:  class MyPlugin(CMSPluginBase):\n    name = _(\"MyPlugin\")\n    cache = False   Nota:  Si deshabilita una cach\u00e9 de plugin aseg\u00farese de reiniciar el servidor y luego desactive la cach\u00e9.",
            "title": "Plugins"
        },
        {
            "location": "/avanzado/cache/#duracion-de-la-cache",
            "text": "Por defecto es 60 segundos pero puede ser cambiado estableciendo el valor que queramos en la settings  CMS_CACHE_DURATIONS",
            "title": "Duraci\u00f3n de la cach\u00e9"
        },
        {
            "location": "/avanzado/cache/#settings",
            "text": "El almacenamiento en cach\u00e9 se establece por defecto como true. Existen varias settings para habilitar/deshabilitar varios comportamientos de cach\u00e9:",
            "title": "Settings"
        },
        {
            "location": "/avanzado/cache/#cms_cache_durations",
            "text": "Este diccionario contiene las distintas configuraciones de duraci\u00f3n de cach\u00e9.  'content' : 60 segundos por defecto para  show_placeholder ,  page_url ,  placeholder  and  static_placeholder  template tags.  'menus' : 3600 segundos por defecto.",
            "title": "CMS_CACHE_DURATIONS"
        },
        {
            "location": "/avanzado/cache/#cms_cache_prefix",
            "text": "cms-  por defecto.  El CMS pondr\u00e1 el valor asociado a esta clave para cada acceso a la cach\u00e9 (set y get). Esto es \u00fatil cuando tiene varias instalaciones de django CMS, y no quiere que compartan objetos de cach\u00e9.  CMS_CACHE_PREFIX = 'mysite-live'",
            "title": "CMS_CACHE_PREFIX"
        },
        {
            "location": "/avanzado/cache/#cms_page_cache",
            "text": "True  por defecto  Las p\u00e1ginas no son almacenadas en cach\u00e9 para los usuarios logados. Si el toolbar es visible, la p\u00e1gina no est\u00e1 cacheada.",
            "title": "CMS_PAGE_CACHE"
        },
        {
            "location": "/avanzado/cache/#cms_placeholder_cache",
            "text": "True  por defecto",
            "title": "CMS_PLACEHOLDER_CACHE"
        },
        {
            "location": "/avanzado/cache/#cms_plugin_cache",
            "text": "True  por defecto",
            "title": "CMS_PLUGIN_CACHE"
        }
    ]
}